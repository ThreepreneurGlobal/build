{"version":3,"sources":["views/user/register.js"],"names":["validatePassword","value","error","length","validateEmail","test","validatePhoneNumber","connect","authUser","loading","registerUserAction","registerUser","history","useState","email","password","phone","initialValues","className","xxs","md","to","id","onSubmit","values","console","log","push","errors","touched","name","validate","type","color","size"],"mappings":"gRAYMA,EAAmB,SAACC,GACxB,IAAIC,EAMJ,OALKD,EAEMA,EAAME,OAAS,IACxBD,EAAQ,0CAFRA,EAAQ,6BAIHA,GAGHE,EAAgB,SAACH,GACrB,IAAIC,EAMJ,OALKD,EAEO,4CAA4CI,KAAKJ,KAC3DC,EAAQ,yBAFRA,EAAQ,kCAIHA,GAGHI,EAAsB,SAACL,GAC3B,IAAIC,EAMJ,OALKD,EAEM,WAAWI,KAAKJ,KACzBC,EAAQ,wBAFRA,EAAQ,iCAIHA,GAkIMK,uBALS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEzB,MAAO,CAAEC,QADkBD,EAAnBC,QACUP,MADSM,EAAVN,SAIqB,CACtCQ,mBAAoBC,MADPJ,EA/HE,SAAC,GAA8C,IAA5CK,EAA2C,EAA3CA,QAASF,EAAkC,EAAlCA,mBAAoBD,EAAc,EAAdA,QAAc,EAC7CI,mBAAS,IAAlBC,EADsD,sBAE1CD,mBAAS,IAArBE,EAFsD,sBAG7CF,mBAAS,IAAlBG,EAHsD,oBAkBvDC,EAAgB,CAAEH,QAAOC,WAAUC,SAEzC,OACE,cAAC,IAAD,CAAKE,UAAU,QAAf,SACE,cAAC,IAAD,CAAOC,IAAI,KAAKC,GAAG,KAAKF,UAAU,kBAAlC,SACE,eAAC,IAAD,CAAMA,UAAU,YAAhB,UACE,sBAAKA,UAAU,gCAAf,UACE,mBAAGA,UAAU,gBAAb,qCACA,oBAAGA,UAAU,aAAb,+CACoC,uBADpC,8BAE8B,IAC5B,cAAC,IAAD,CAASG,GAAG,cAAcH,UAAU,QAApC,mBAHF,UASF,sBAAKA,UAAU,YAAf,UACE,cAAC,IAAD,CAASG,GAAG,IAAIH,UAAU,QAA1B,SACE,sBAAMA,UAAU,kBAElB,cAAC,IAAD,CAAWA,UAAU,OAArB,SACE,cAAC,IAAD,CAAcI,GAAG,oBAGnB,cAAC,IAAD,CAAQL,cAAeA,EAAeM,SArCzB,SAACC,GACtBC,QAAQC,IAAIF,EAAQV,EAAOC,GACN,KAAjBS,EAAOV,OAAoC,KAApBU,EAAOT,WAChCU,QAAQC,IAAIF,GAGZd,EAAmBc,EAAQZ,GAC3BA,EAAQe,KAAK,sBA8BP,SACG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,WAQE,eAAC,IAAD,CAAWX,UAAU,6BAArB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcI,GAAG,iBAEnB,cAAC,IAAD,CACEJ,UAAU,eACVY,KAAK,QACLC,SAAU3B,IAEXwB,EAAOd,OAASe,EAAQf,OACvB,qBAAKI,UAAU,2BAAf,SACGU,EAAOd,WAKd,eAAC,IAAD,CAAWI,UAAU,6BAArB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcI,GAAG,wBAEnB,cAAC,IAAD,CACEJ,UAAU,eACVY,KAAK,QACLC,SAAUzB,IAEXsB,EAAOZ,OAASa,EAAQb,OACvB,qBAAKE,UAAU,2BAAf,SACGU,EAAOZ,WAKd,eAAC,IAAD,CAAWE,UAAU,6BAArB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcI,GAAG,oBAEnB,cAAC,IAAD,CACEJ,UAAU,eACVc,KAAK,WACLF,KAAK,WACLC,SAAU/B,IAEX4B,EAAOb,UAAYc,EAAQd,UAC1B,qBAAKG,UAAU,2BAAf,SACGU,EAAOb,cAKd,qBAAKG,UAAU,gDAAf,SACE,cAAC,IAAD,CACEe,MAAM,UACNf,UAAS,wCACPT,EAAU,eAAiB,IAE7ByB,KAAK,KALP,SAOE,cAAC,IAAD,CAAcZ,GAAG","file":"static/js/user-register.78ba9612.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Row, Card, CardTitle, FormGroup, Label, Button } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik, Form, Field } from 'formik';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { registerUser } from '../../redux/actions';\r\n\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\n// import { adminRoot } from '../../constants/defaultValues';\r\n\r\nconst validatePassword = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your password';\r\n  } else if (value.length < 4) {\r\n    error = 'Value must be longer than 3 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validateEmail = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your email address';\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n    error = 'Invalid email address';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validatePhoneNumber = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your phone number';\r\n  } else if (/^\\d{10}$/.test(value)) {\r\n    error = 'Invalid Phone Number';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst Register = ({ history, registerUserAction, loading }) => {\r\n  const [email] = useState('');\r\n  const [password] = useState('');\r\n  const [phone] = useState('');\r\n  // const [name] = useState('');\r\n\r\n  const onUserRegister = (values) => {\r\n    console.log(values, email, password);\r\n    if (values.email !== '' && values.password !== '') {\r\n      console.log(values);\r\n\r\n      // history.push(adminRoot);\r\n      registerUserAction(values, history);\r\n      history.push('/user/verify-otp');\r\n    }\r\n    // call registerUserAction()\r\n  };\r\n\r\n  const initialValues = { email, password, phone };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">\r\n              Please use this form to register. <br />\r\n              If you are a member, please{' '}\r\n              <NavLink to=\"/user/login\" className=\"white\">\r\n                login\r\n              </NavLink>\r\n              .\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <NavLink to=\"/\" className=\"white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.register\" />\r\n            </CardTitle>\r\n\r\n            <Formik initialValues={initialValues} onSubmit={onUserRegister}>\r\n              {({ errors, touched }) => (\r\n                <Form>\r\n                  {/* <FormGroup className=\"form-group has-float-label  mb-4\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.fullname\" />\r\n                    </Label>\r\n                    <Input type=\"name\" defaultValue={name} />\r\n                  </FormGroup> */}\r\n\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.email\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"email\"\r\n                      validate={validateEmail}\r\n                    />\r\n                    {errors.email && touched.email && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.email}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.phone-number\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"phone\"\r\n                      validate={validatePhoneNumber}\r\n                    />\r\n                    {errors.phone && touched.phone && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.phone}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.password\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      validate={validatePassword}\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.password}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <div className=\"d-flex justify-content-end align-items-center\">\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <IntlMessages id=\"user.register-button\" />\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { loading, error } = authUser;\r\n  return { loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  registerUserAction: registerUser,\r\n})(Register);\r\n"],"sourceRoot":""}