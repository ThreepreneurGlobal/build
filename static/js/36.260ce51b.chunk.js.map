{"version":3,"sources":["components/StateButton.js","hooks/use-fetch.js","components/common/CustomSelectInput.js","components/application/JoinTeamModal.js","views/app/challenges/hack-wizard/complete-status.js","views/app/challenges/hack-wizard/step-four.js","views/app/challenges/hack-wizard/step-one.js","views/app/challenges/hack-wizard/index.js"],"names":["StateButton","id","className","color","children","onClick","next","successNext","useState","status","setStatus","message","setMessage","messageShow","setMessageShow","classnames","then","res","catch","err","finally","setTimeout","disabled","placement","isOpen","target","defaultProps","useFetch","url","refresh","name","loading","setLoading","error","setError","data","setData","useEffect","a","instance","method","response","success","fetchData","propTypes","PropTypes","string","isRequired","bool","CustomSelectInput","props","customProps","autoCorrect","autoCapitalize","Input","JoinTeamModal","setOpenModal","code","formValues","setFormValues","ModalHeader","IntlMessages","ModalBody","FormGroup","Label","type","value","question","onChange","event","key","handleChange","ModalFooter","Promise","Button","CompleteStatus","completePercentage","history","useHistory","openJoinTeam","setOpenJoinTeam","user_id","getProfileData","handleSubmit","failed","console","log","hackathon_id","push","adminRoot","addJudge","Card","CardBody","CardTitle","window","location","href","outline","Modal","toggle","StepFour","setCompletePercentage","hackData","conditionsAccepted","setAccepted","profileData","handleSuccessButtonClick","hackathon","resolve","_","reject","CustomInput","label","checked","xxs","connect","authUser","currentUser","setChange","email","id2","noFormalEducation","setNoFormalEducation","currentlyStudyHere","setCurrentlyStudyHere","noExperience","setNoExperience","full_name","gender","tshirt_size","contact_no","bio","degree_type","education_institution","field_of_study","month_of_graduation","Date","getMonth","year_of_graduation","getFullYear","employer","role","joining_data","leaving_data","job_description","facebook","github","linkedin","instagram","city","startDate","setStartDate","handleSubmitAbout","newData","NotificationManager","setProfileData","Row","md","components","classNamePrefix","defaultInputValue","selectedOption","options","genderOptions","shirtSizeOptions","rows","placeholder","selected","date","input","dateFormat","showMonthYearPicker","JSON","stringify","showYearPicker","InputGroup","InputGroupAddon","addonType","title","HackWizard","match","params","change","xs"],"mappings":"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","file":"static/js/36.260ce51b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Popover, PopoverBody } from 'reactstrap';\r\nimport classnames from 'classnames';\r\n\r\nconst StateButton = ({\r\n  id,\r\n  className,\r\n  color,\r\n  children,\r\n  onClick,\r\n  next,\r\n  successNext,\r\n}) => {\r\n  const [status, setStatus] = useState('default');\r\n  const [message, setMessage] = useState('');\r\n  const [messageShow, setMessageShow] = useState(false);\r\n\r\n  const handleOnClick = () => {\r\n    setStatus('processing');\r\n\r\n    onClick()\r\n      .then((res) => {\r\n        setMessage(res);\r\n        setStatus('success');\r\n        if (successNext) {\r\n          successNext();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setMessage(err);\r\n        setStatus('fail');\r\n      })\r\n      .finally(() => {\r\n        setMessageShow(true);\r\n        setTimeout(() => {\r\n          setStatus('default');\r\n          setMessageShow(false);\r\n          if (next) {\r\n            next();\r\n          }\r\n        }, 3000);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <span>\r\n      <Button\r\n        id={id}\r\n        className={`btn-multiple-state  ${className}  ${classnames({\r\n          'show-spinner': status === 'processing',\r\n          'show-success': status === 'success',\r\n          'show-fail': status === 'fail',\r\n        })}`}\r\n        color={color}\r\n        onClick={handleOnClick}\r\n        disabled={status !== 'default'}\r\n      >\r\n        <Popover placement=\"top\" isOpen={messageShow} target={id}>\r\n          <PopoverBody>{message}</PopoverBody>\r\n        </Popover>\r\n        <span className=\"spinner d-inline-block\">\r\n          <span className=\"bounce1\" />\r\n          <span className=\"bounce2\" />\r\n          <span className=\"bounce3\" />\r\n        </span>\r\n        <span className=\"icon success\">\r\n          <i className=\"simple-icon-check\" />\r\n        </span>\r\n        <span className=\"icon fail\">\r\n          <i className=\"simple-icon-exclamation\" />\r\n        </span>\r\n        <span className=\"label\">{children}</span>\r\n      </Button>\r\n    </span>\r\n  );\r\n};\r\n\r\nStateButton.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  className: PropTypes.string,\r\n  color: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n  onClick: PropTypes.func.isRequired,\r\n  next: PropTypes.func,\r\n  successNext: PropTypes.func,\r\n};\r\n\r\nStateButton.defaultProps = {\r\n  className: '',\r\n  children: null,\r\n  next: null,\r\n  successNext: null,\r\n};\r\n\r\nexport default StateButton;\r\n","import { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport instance from '../helpers/axiosInstance';\r\n\r\nconst useFetch = (url, refresh = false, name = 'data') => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!url) {\r\n      setError('Please Provide a Uri!');\r\n      return;\r\n    }\r\n\r\n    if (refresh) {\r\n      setData(false);\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await instance({\r\n          method: 'GET',\r\n          url,\r\n        });\r\n\r\n        if (response.data.success) {\r\n          setData(response.data[name]);\r\n        } else {\r\n          setError(response.data.message);\r\n        }\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return { loading, data, error };\r\n};\r\n\r\nexport default useFetch;\r\n\r\nuseFetch.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  refresh: PropTypes.bool,\r\n};\r\n","import React from 'react';\r\nimport { components } from 'react-select';\r\n\r\nconst CustomSelectInput = (props) => {\r\n  const customProps = { ...props };\r\n  delete customProps.autoCorrect;\r\n  delete customProps.autoCapitalize;\r\n  return <components.Input {...customProps} />;\r\n};\r\n\r\nexport default CustomSelectInput;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from 'reactstrap';\r\n// import instance from '../../helpers/axiosInstance';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\n\r\nimport StateButton from '../StateButton';\r\n\r\nconst JoinTeamModal = ({ setOpenModal }) => {\r\n  const [formValues, setFormValues] = useState({\r\n    code: '',\r\n  });\r\n\r\n  const handleSuccessButtonClick = () => {\r\n    return new Promise((success) => {\r\n      setTimeout(() => {\r\n        success('Everything went right!');\r\n      }, 1400);\r\n    });\r\n  };\r\n\r\n  // const handleSubmit = async (newData) => {\r\n  //   return new Promise((success, failed) => {\r\n  //     const updateProfile = async () => {\r\n  //       try {\r\n  //         const response = await instance({\r\n  //           method: 'POST',\r\n  //           url: '/addquestion',\r\n  //           data: JSON.stringify({ question: [{ ...newData }] }),\r\n  //           // headers: {\r\n  //           //   Authorization: `Bearer ${access_token}`,\r\n  //           // },\r\n  //         });\r\n\r\n  //         const { data } = response;\r\n  //         console.log(data);\r\n  //         if (data.success) {\r\n  //           setFormValues({ ...formValues, ...newData });\r\n  //           success('Hackathon updated successfully!');\r\n  //         } else {\r\n  //           failed('Failed to update hackathon!');\r\n  //         }\r\n  //       } catch (error) {\r\n  //         console.log(error);\r\n  //         failed('Failed to update hackathon!');\r\n  //       }\r\n  //     };\r\n  //     updateProfile();\r\n  //   });\r\n  // };\r\n\r\n  const handleChange = (event, key, value = false) => {\r\n    setFormValues({\r\n      ...formValues,\r\n      [key]: value ? event : event.target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader>\r\n        <h2 className=\"lead\">\r\n          <IntlMessages id=\"challenges.modal.join-team-title\" />\r\n        </h2>\r\n      </ModalHeader>\r\n\r\n      <ModalBody>\r\n        <FormGroup>\r\n          <Label>\r\n            <IntlMessages id=\"challenges.modal.code\" />\r\n          </Label>\r\n          <FormGroup>\r\n            <Input\r\n              type=\"text\"\r\n              value={formValues.question}\r\n              onChange={(event) => handleChange(event, 'code')}\r\n            />\r\n          </FormGroup>\r\n        </FormGroup>\r\n      </ModalBody>\r\n\r\n      <ModalFooter>\r\n        <StateButton\r\n          id=\"add-question-buttom\"\r\n          color=\"secondary\"\r\n          onClick={() => handleSuccessButtonClick(formValues)}\r\n        >\r\n          <IntlMessages id=\"challenges.modal.application-add\" />\r\n        </StateButton>\r\n        <Button color=\"danger\" onClick={() => setOpenModal(false)}>\r\n          <IntlMessages id=\"challenges.modal.application-cancel\" />\r\n        </Button>\r\n      </ModalFooter>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JoinTeamModal;\r\n","/* eslint-disable camelcase */\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, Card, CardBody, CardTitle, Modal } from 'reactstrap';\r\nimport JoinTeamModal from '../../../../components/application/JoinTeamModal';\r\n\r\nimport { Separator } from '../../../../components/common/CustomBootstrap';\r\nimport StateButton from '../../../../components/StateButton';\r\nimport instance from '../../../../helpers/axiosInstance';\r\nimport { adminRoot } from '../../../../constants/defaultValues';\r\nimport IntlMessages from '../../../../helpers/IntlMessages';\r\nimport { getProfileData } from '../../../../helpers/Utils';\r\n\r\nconst CompleteStatus = ({ completePercentage, id }) => {\r\n  const history = useHistory();\r\n  const [openJoinTeam, setOpenJoinTeam] = useState(false);\r\n\r\n  const { user_id } = getProfileData();\r\n\r\n  const handleSubmit = async () => {\r\n    return new Promise((success, failed) => {\r\n      if (completePercentage < 100) {\r\n        failed('Please Complete the Form!');\r\n      }\r\n\r\n      const addJudge = async () => {\r\n        console.log(\"hackathon Submitted\");\r\n        try {\r\n          const response = await instance({\r\n            method: 'POST',\r\n            url: '/addparticipant',\r\n            data: {\r\n              hackathon_id: id,\r\n              status: '0',\r\n              user_id,\r\n            },\r\n          });\r\n\r\n          const { data } = response;\r\n          if (data.success) {\r\n            success('Application submitted successfully!');\r\n            history.push(`${adminRoot}/challenges/${id}`);\r\n          } else {\r\n            failed('Failed to Submit Application!');\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n          failed('Failed to update hackathon!');\r\n        }\r\n      };\r\n\r\n      addJudge();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody className=\"text-center\">\r\n          <CardTitle>\r\n            <h2 className=\"lead\">\r\n              <IntlMessages id=\"challenges.application-not-submitted\" />\r\n            </h2>\r\n            <Separator className=\"mb-5\" />\r\n          </CardTitle>\r\n          <p>\r\n            <IntlMessages id=\"challenges.application-filled\" />\r\n          </p>\r\n          <h3 className=\"lead\">{completePercentage}%</h3>\r\n          <p>\r\n            <IntlMessages id=\"challenges.fill-complete-message\" />\r\n          </p>\r\n\r\n          <StateButton\r\n            id=\"submit-application\"\r\n            color=\"primary\"\r\n            onClick={handleSubmit}\r\n            className={completePercentage >= 100 ? '' : 'disabled'}\r\n            successNext={() => {\r\n              window.location.href = '/';\r\n            }}\r\n          >\r\n            <IntlMessages id=\"challenges.submit-individual-button\" />\r\n          </StateButton>\r\n\r\n          <Separator className=\"mt-4 mb-4\" />\r\n\r\n          <Button outline onClick={() => setOpenJoinTeam(true)}>\r\n            <IntlMessages id=\"challenges.join-team-button\" />\r\n          </Button>\r\n\r\n          <Modal\r\n            isOpen={openJoinTeam}\r\n            toggle={() => setOpenJoinTeam(!openJoinTeam)}\r\n          >\r\n            <JoinTeamModal setOpenModal={setOpenJoinTeam} />\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompleteStatus;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { CustomInput } from 'reactstrap';\r\nimport { Colxx } from '../../../../components/common/CustomBootstrap';\r\nimport StateButton from '../../../../components/StateButton';\r\nimport IntlMessages from '../../../../helpers/IntlMessages';\r\nimport instance from '../../../../helpers/axiosInstance';\r\nimport { adminRoot } from '../../../../constants/defaultValues';\r\nimport { getProfileData } from '../../../../helpers/Utils';\r\n\r\nconst StepFour = ({setCompletePercentage, hackData}) => {\r\n  const history = useHistory();\r\n  const [conditionsAccepted, setAccepted] = useState(false);\r\n  const profileData = getProfileData();\r\n  useEffect(() => {\r\n    if(conditionsAccepted){\r\n      setCompletePercentage(100);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [conditionsAccepted]);\r\n\r\n  const handleSuccessButtonClick = async() => {\r\n    if (conditionsAccepted) {\r\n        const response = await instance({\r\n          method: 'POST',\r\n          url: '/addparticipant',\r\n          data: { user_id:profileData.user_id,hackathon_id:hackData.hackathon.id, status:\"0\" },\r\n        });\r\n    \r\n        const { data } = response;\r\n    \r\n        if (data.success) {\r\n          history.push(`${adminRoot}/challenges/${hackData.hackathon.id}`)\r\n          return new Promise((resolve) => {\r\n            resolve('Hackathon applied successfully!');\r\n          });  \r\n        }\r\n          return new Promise((_, reject) => {\r\n            reject(data.message);\r\n          });\r\n        \r\n      } \r\n        return new Promise((_, reject) => {\r\n          reject('Please accept terms and conditions!');\r\n        });\r\n      \r\n  };\r\n\r\n  return (\r\n    <div className=\"wizard-basic-step m-4 pt-4\">\r\n      <h6 className=\"lead\">\r\n        <IntlMessages id=\"challenges.terms-and-conditions-title\" />\r\n      </h6>\r\n      <p>\r\n        <IntlMessages id=\"challenges.terms-and-conditions-text\" />\r\n      </p>\r\n\r\n      <CustomInput\r\n        type=\"checkbox\"\r\n        label={<IntlMessages id=\"challenges.terms-and-conditions\" />}\r\n        checked={conditionsAccepted}\r\n        onClick={() => setAccepted(!conditionsAccepted)}\r\n      />\r\n\r\n      <Colxx xxs=\"12\" className=\"text-center my-4\">\r\n        <StateButton\r\n          id=\"step-one-button\"\r\n          color=\"primary\"\r\n          onClick={handleSuccessButtonClick}\r\n        >\r\n          <IntlMessages id=\"forms.submit\" />\r\n        </StateButton>\r\n      </Colxx>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StepFour;\r\n","import React, {useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Row,\r\n // Button,\r\n  Card,\r\n  CardBody,\r\n  CustomInput,\r\n  CardTitle,\r\n  FormGroup,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Label,\r\n} from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport DatePicker from 'react-datepicker';\r\n// import { useHistory } from 'react-router-dom';\r\nimport {\r\n  Colxx,\r\n  Separator,\r\n} from '../../../../components/common/CustomBootstrap';\r\nimport StateButton from '../../../../components/StateButton';\r\nimport { NotificationManager } from '../../../../components/common/react-notifications';\r\nimport CustomSelectInput from '../../../../components/common/CustomSelectInput';\r\nimport {\r\n // adminRoot,\r\n  genderOptions,\r\n  shirtSizeOptions,\r\n} from '../../../../constants/defaultValues';\r\nimport instance from '../../../../helpers/axiosInstance';\r\nimport { setProfileData,getProfileData } from '../../../../helpers/Utils';\r\n// import StepTwo from './step-two';\r\n// import { hackthonApplication } from '../../../../constants/defaultValues';\r\nimport IntlMessages from '../../../../helpers/IntlMessages';\r\n// import Section from './components/section';\r\n\r\nconst addLeadingZero = (input) => {\r\n  return input < 10 ? `0${input}` : input;\r\n};\r\n\r\nconst StepOne = ({ hackData, currentUser, setChange, setCompletePercentage }) => {\r\n// const history = useHistory();\r\n  const { hackathon } = hackData;\r\n  const { email } = currentUser;\r\n  const profileData = getProfileData();\r\n  console.log(email);\r\n  const { id } = profileData;\r\n  const id2 = profileData.user_id;\r\n//  const [editAbout, setEditAbout] = useState(false);\r\n  const [noFormalEducation, setNoFormalEducation] = useState(false);\r\n  const [currentlyStudyHere, setCurrentlyStudyHere] = useState(false);\r\n  const [noExperience, setNoExperience] = useState(false);\r\n\r\n  const [formValues, setFormValues] = useState({\r\n    full_name : profileData.full_name,\r\n    gender : profileData.gender,\r\n    tshirt_size : profileData.tshirt_size,\r\n    contact_no : profileData.contact_no,\r\n    bio : profileData.bio,\r\n\r\n    degree_type : profileData.degree_type,\r\n    education_institution : profileData.education_institution,\r\n    field_of_study : profileData.field_of_study,\r\n    month_of_graduation: profileData.month_of_graduation || new Date().getMonth(),\r\n    year_of_graduation: profileData.year_of_graduation || new Date().getFullYear(),\r\n\r\n    employer: profileData.employer,\r\n    role: profileData.role,\r\n    joining_data: profileData.joining_data,\r\n    leaving_data: profileData.leaving_data,\r\n    job_description: profileData.job_description,\r\n\r\n    facebook: profileData.facebook,\r\n    github: profileData.github,\r\n    linkedin: profileData.linkedin,\r\n    instagram: profileData.instagram,\r\n\r\n    city: profileData.city,\r\n  });\r\n\r\n  const [startDate, setStartDate] = useState(\r\n    new Date(formValues.year_of_graduation, formValues.month_of_graduation)\r\n  ); \r\n\r\n  const handleChange = (event, key) => {\r\n    setFormValues({\r\n      ...formValues,\r\n      [key]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmitAbout = async (newData) => {\r\n\r\n    if (\r\n      newData.full_name === null ||\r\n      newData.gender === null ||\r\n      newData.tshirt_size === null ||\r\n      newData.contact_no === null ||\r\n      newData.bio === null ||\r\n      newData.linkedin === null ||\r\n      newData.city === null\r\n      ) \r\n    {\r\n      NotificationManager.error(\r\n        'Please enter all the information!',\r\n        'Hackathon Operation Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n    else{\r\n      const response = await instance({\r\n        method: 'POST',\r\n        url: '/updateProfile',\r\n        data: { user_id:id2,id, ...newData },\r\n      });\r\n  \r\n      const { data } = response;\r\n  \r\n      if (data.success) {\r\n        setProfileData({ ...profileData, ...newData });\r\n        setCompletePercentage(75);\r\n        setChange(2);\r\n        \r\n        return new Promise((resolve) => {\r\n          resolve('Profile updated successfully!');\r\n        }); \r\n        \r\n      }\r\n    }\r\n\r\n    return new Promise((_, reject) => {\r\n      // eslint-disable-next-line\r\n      reject('Failed to update profile!');\r\n    });\r\n  };\r\n\r\n  // const applicationData = JSON.parse(hackathon.application) || {\r\n  //   about: [],\r\n  //   contact: [],\r\n  //   education: [],\r\n  //   experience: [],\r\n  //   online_profiles: [],\r\n  // };\r\n\r\n  // const applicationAboutData = hackthonApplication.about.filter(({ value }) =>\r\n  //   applicationData.about.includes(value)\r\n  // );\r\n  // const applicationContactData = hackthonApplication.contact.filter(\r\n  //   ({ value }) => applicationData.contact.includes(value)\r\n  // );\r\n  // const applicationEducationData = hackthonApplication.education.filter(\r\n  //   ({ value }) => applicationData.education.includes(value)\r\n  // );\r\n  // const applicationExpericeData = hackthonApplication.experience.filter(\r\n  //   ({ value }) => applicationData.experience.includes(value)\r\n  // );\r\n  // const applicationOnlineProfileData = hackthonApplication.online_profiles.filter(\r\n  //   ({ value }) => applicationData.online_profiles.includes(value)\r\n  // );\r\n\r\n  // const handleSuccessButtonClick = () => {\r\n  //   return new Promise((success) => {\r\n  //     setTimeout(() => {\r\n  //       success('Everything went right!');\r\n  //     }, 1400);\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <div className=\"wizard-basic-step m-4 pt-4\">\r\n      <Card className=\"mb-4\" color=\"secondary\">\r\n        <CardBody>\r\n          <CardTitle className=\"d-flex justify-content-between\">\r\n            <IntlMessages id=\"challenges.step-1\" />\r\n          </CardTitle>\r\n        </CardBody>\r\n      </Card>\r\n      <h2 className=\"lead\">{hackathon.name}</h2>\r\n      <p>\r\n        <IntlMessages id=\"challenges.sub-title\" />\r\n      </p>\r\n      <Separator className=\"mb-2\" />\r\n\r\n      {/* {applicationAboutData.length ? (\r\n        <Section data={applicationAboutData} userData={userData} />\r\n      ) : null}\r\n\r\n      {applicationExpericeData.length ? (\r\n        <Section data={applicationExpericeData} userData={userData} />\r\n      ) : null}\r\n\r\n      {applicationEducationData.length ? (\r\n        <Section data={applicationEducationData} userData={userData} />\r\n      ) : null}\r\n\r\n      {applicationOnlineProfileData.length ? (\r\n        <Section data={applicationOnlineProfileData} userData={userData} />\r\n      ) : null}\r\n\r\n      {applicationContactData.length ? (\r\n        <Section data={applicationContactData} userData={userData} />\r\n      ) : null} */}\r\n\r\n<Row className=\"justify-content-center\">\r\n        <Colxx xxs=\"12\" md=\"12\">\r\n          <Card className=\"mb-4\">\r\n            {/* <div className=\"position-absolute card-top-buttons\">\r\n              <Button\r\n                outline\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  setEditAbout(!editAbout);\r\n                }}\r\n                className=\"icon-button\"\r\n              >\r\n                <i className=\"simple-icon-pencil\" />\r\n              </Button>\r\n            </div> */}\r\n            <CardBody>\r\n              <CardTitle>\r\n                <h2 className=\"lead\">\r\n                  <IntlMessages id=\"Update your all details\" />\r\n                </h2>\r\n              </CardTitle>\r\n\r\n              <Separator className=\"mb-3\" />\r\n\r\n              <FormGroup className=\"mb-3\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.full-name\" />\r\n                </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"full-name\"\r\n                  value={formValues.full_name}\r\n                  onChange={(event) => {\r\n                    handleChange(event, 'full_name');\r\n                  }}\r\n                  \r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.email\" />\r\n                </Label>\r\n                <Input type=\"text\" name=\"email\" value={email} disabled />\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.phone\" />\r\n                </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"phone\"\r\n                  value={formValues.contact_no}\r\n                  onChange={(event) => {\r\n                    handleChange(event, 'contact_no');\r\n                  }}\r\n                  \r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.gender\" />\r\n                </Label>\r\n                \r\n                  <Select\r\n                    components={{ Input: CustomSelectInput }}\r\n                    className=\"react-select\"\r\n                    classNamePrefix=\"react-select\"\r\n                    name=\"select-gender\"\r\n                    defaultInputValue={formValues.gender}\r\n                    onChange={(selectedOption) => {\r\n                      setFormValues({\r\n                        ...formValues,\r\n                        gender: selectedOption.value,\r\n                      });\r\n                    }}\r\n                    options={genderOptions}\r\n                  />\r\n                {/* ) : (\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"gender\"\r\n                    value={formValues.gender}\r\n                    \r\n                  />\r\n                )} */}\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.t-shirt-size\" />\r\n                </Label>\r\n                \r\n                  <Select\r\n                    components={{ Input: CustomSelectInput }}\r\n                    className=\"react-select\"\r\n                    classNamePrefix=\"react-select\"\r\n                    name=\"select-t-shirt-size\"\r\n                    defaultInputValue={formValues.tshirt_size}\r\n                    onChange={(selectedOption) => {\r\n                      setFormValues({\r\n                        ...formValues,\r\n                        tshirt_size: selectedOption.value,\r\n                      });\r\n                    }}\r\n                    options={shirtSizeOptions}\r\n                  />\r\n                {/* ) : (\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"t-shirt-size\"\r\n                    value={formValues.tshirt_size}\r\n                    \r\n                  />\r\n                )} */}\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.bio\" />\r\n                </Label>\r\n                <Input\r\n                  type=\"textarea\"\r\n                  name=\"bio\"\r\n                  rows=\"6\"\r\n                  placeholder=\"About Yourself\"\r\n                  value={formValues.bio}\r\n                  onChange={(event) => {\r\n                    handleChange(event, 'bio');\r\n                  }}\r\n                  \r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <CustomInput\r\n                  type=\"checkbox\"\r\n                  id=\"formal-education\"\r\n                  checked={noFormalEducation}\r\n                  onChange={() => {\r\n                    setNoFormalEducation(!noFormalEducation);\r\n                    if (noFormalEducation) {\r\n                      setFormValues({\r\n                        ...formValues,\r\n                        degree_type: '',\r\n                        education_institution: '',\r\n                      });\r\n                    }\r\n                  }}\r\n                  \r\n                  label=\"I don't have Formal Education.\"\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.degree-type\" />\r\n                </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"degree-type\"\r\n                  placeholder=\"e.g. B. Tech in Computer Science\"\r\n                  value={formValues.degree_type}\r\n                  onChange={(event) => {\r\n                    handleChange(event, 'degree_type');\r\n                  }}\r\n                  disabled={noFormalEducation}\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-5\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.select-institution\" />\r\n                </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"select-institution\"\r\n                  placeholder=\"e.g Vellore Institute of Technology\"\r\n                  value={formValues.education_institution}\r\n                  onChange={(event) => {\r\n                    handleChange(event, 'education_institution');\r\n                  }}\r\n                  disabled={noFormalEducation}\r\n                />\r\n              </FormGroup>\r\n\r\n              <Separator className=\"mt-2 mb-2\" />\r\n\r\n              <FormGroup>\r\n                <CustomInput\r\n                  type=\"checkbox\"\r\n                  id=\"curently-study-here\"\r\n                  checked={currentlyStudyHere}\r\n                  onChange={() => {\r\n                    setCurrentlyStudyHere(!currentlyStudyHere);\r\n                    if (currentlyStudyHere) {\r\n                      setFormValues({\r\n                        ...formValues,\r\n                        month_of_graduation: '',\r\n                        year_of_graduation: '',\r\n                      });\r\n                    }\r\n                  }}\r\n                  \r\n                  label=\"I currently study here.\"\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.field-of-study\" />\r\n                </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"field-of-study\"\r\n                  placeholder=\"e.g. Software Engineering\"\r\n                  value={formValues.field_of_study}\r\n                  onChange={(event) => {\r\n                    handleChange(event, 'field_of_study');\r\n                  }}\r\n                  disabled={currentlyStudyHere}\r\n                />\r\n              </FormGroup>\r\n\r\n              <Row>\r\n                <Colxx>\r\n                  <FormGroup className=\"mb-3\">\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.month-of-graduation\" />\r\n                    </Label>\r\n                    {!currentlyStudyHere ? (\r\n                      <DatePicker\r\n                        selected={startDate}\r\n                        onChange={(date) => {\r\n                          setStartDate(date);\r\n                          const event = {\r\n                            target: {\r\n                              value: addLeadingZero(date.getMonth() + 1),\r\n                            },\r\n                          };\r\n                          handleChange(event, 'month_of_graduation');\r\n                        }}\r\n                        dateFormat=\"MM\"\r\n                        showMonthYearPicker\r\n                      />\r\n                    ) : (\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"month\"\r\n                        placeholder={`e.g. ${new Date().getMonth()}`}\r\n                        value={formValues.month_of_graduation}\r\n                        disabled={currentlyStudyHere}\r\n                      />\r\n                    )}\r\n                  </FormGroup>\r\n                </Colxx>\r\n\r\n                <Colxx>\r\n                  <FormGroup className=\"mb-3\">\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.year-of-graduation\" />\r\n                    </Label>\r\n\r\n                    {!currentlyStudyHere ? (\r\n                      <DatePicker\r\n                        selected={startDate}\r\n                        onChange={(date) => {\r\n                          setStartDate(date);\r\n                          const event = {\r\n                            target: {\r\n                              value: JSON.stringify(date.getFullYear()),\r\n                            },\r\n                          };\r\n                          handleChange(event, 'year_of_graduation');\r\n                        }}\r\n                        showYearPicker\r\n                        dateFormat=\"yyyy\"\r\n                      />\r\n                    ) : (\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"year\"\r\n                        placeholder={`e.g. ${new Date().getFullYear()}`}\r\n                        value={formValues.year_of_graduation}\r\n                        disabled={currentlyStudyHere}\r\n                      />\r\n                    )}\r\n                  </FormGroup>\r\n                </Colxx>\r\n\r\n              </Row>\r\n\r\n              <FormGroup>\r\n                <CustomInput\r\n                  type=\"checkbox\"\r\n                  id=\"formal-education\"\r\n                  \r\n                  label=\"I am yet to find opportunity.\"\r\n                  checked={noExperience}\r\n                  onChange={() => setNoExperience(!noExperience)}\r\n                />\r\n              </FormGroup>\r\n\r\n              <Row>\r\n                <Colxx md=\"6\">\r\n                  <FormGroup className=\"mb-3\">\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.employer\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"employer\"\r\n                      placeholder=\"employer\"\r\n                      value={formValues.employer}\r\n                      onChange={(event) => {\r\n                        handleChange(event, 'employer');\r\n                      }}\r\n                      disabled={noExperience}\r\n                    />\r\n                  </FormGroup>\r\n                </Colxx>\r\n                <Colxx md=\"6\">\r\n                  <FormGroup className=\"mb-3\">\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.role\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"role\"\r\n                      placeholder=\"Role\"\r\n                      value={formValues.role}\r\n                      onChange={(event) => {\r\n                        handleChange(event, 'role');\r\n                      }}\r\n                      disabled={noExperience}\r\n                    />\r\n                  </FormGroup>\r\n                </Colxx>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Colxx md=\"6\">\r\n                  <FormGroup className=\"mb-3\">\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.from\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"joining_data\"\r\n                      placeholder=\"2021\"\r\n                      value={formValues.joining_data}\r\n                      onChange={(event) => {\r\n                        handleChange(event, 'joining_data');\r\n                      }}\r\n                      disabled={noExperience}\r\n                    />\r\n                  </FormGroup>\r\n                </Colxx>\r\n\r\n                <Colxx md=\"6\">\r\n                  <FormGroup className=\"mb-3\">\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.to\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"leaving_data\"\r\n                      placeholder=\"04\"\r\n                      value={formValues.leaving_data}\r\n                      onChange={(event) => {\r\n                        handleChange(event, 'leaving_data');\r\n                      }}\r\n                      disabled={noExperience}\r\n                    />\r\n                  </FormGroup>\r\n                </Colxx>\r\n              </Row>\r\n\r\n              <FormGroup className=\"mb-3\">\r\n                <Label>\r\n                  <IntlMessages id=\"forms.description\" />\r\n                </Label>\r\n                <Input\r\n                  type=\"textarea\"\r\n                  name=\"job_description\"\r\n                  placeholder=\"Desribe your work experience\"\r\n                      value={formValues.job_description}\r\n                      onChange={(event) => {\r\n                        handleChange(event, 'job_description');\r\n                      }}\r\n                  rows=\"6\"\r\n                  disabled={noExperience}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup className=\"mb-6\">\r\n                <InputGroup>\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <i className=\"simple-icon-social-linkedin btn\" />\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"linkedin\"\r\n                    value={formValues.linkedin}\r\n                    onChange={(event) => {\r\n                      handleChange(event, 'linkedin');\r\n                    }}\r\n                    \r\n                  />\r\n                </InputGroup>\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-6\">\r\n                <InputGroup>\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <i className=\"simple-icon-social-facebook btn\" />\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"facebook\"\r\n                    value={formValues.facebook}\r\n                    onChange={(event) => {\r\n                      handleChange(event, 'facebook');\r\n                    }}\r\n                    \r\n                  />\r\n                </InputGroup>\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-6\">\r\n                <InputGroup>\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <i className=\"simple-icon-social-github btn\" />\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"github\"\r\n                    className=\"form-control\"\r\n                    value={formValues.github}\r\n                    onChange={(event) => {\r\n                      handleChange(event, 'github');\r\n                    }}\r\n                    \r\n                  />\r\n                </InputGroup>\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-6\">\r\n                <InputGroup>\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <i className=\"simple-icon-social-instagram btn\" />\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"github\"\r\n                    className=\"form-control\"\r\n                    value={formValues.instagram}\r\n                    onChange={(event) => {\r\n                      handleChange(event, 'instagram');\r\n                    }}\r\n                    \r\n                  />\r\n                </InputGroup>\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3\">\r\n          <Label>\r\n            <IntlMessages id=\"forms.email\" />\r\n          </Label>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"email\"\r\n            value={email}\r\n            disabled\r\n            title=\"Can't update Email\"\r\n          />\r\n        </FormGroup>\r\n\r\n        <Separator className=\"mb-4\" />\r\n\r\n        <FormGroup className=\"mb-3\">\r\n          <Label>\r\n            <IntlMessages id=\"forms.phone\" />\r\n          </Label>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"contact-number\"\r\n            value={formValues.contact_no}\r\n            onChange={(event) => {\r\n              handleChange(event, 'contact_no');\r\n            }}\r\n            \r\n          />\r\n        </FormGroup>\r\n\r\n        <FormGroup className=\"mb-3\">\r\n          <Label>\r\n            <IntlMessages id=\"forms.city\" />\r\n          </Label>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"city\"\r\n            placeholder=\"e.g. Delhi\"\r\n            value={formValues.city}\r\n            onChange={(event) => {\r\n              handleChange(event, 'city');\r\n            }}\r\n            \r\n          />\r\n        </FormGroup>\r\n\r\n\r\n             \r\n                <FormGroup className=\"text-center\">\r\n                  <StateButton\r\n                    id=\"submitAndNextButton\"\r\n                    color=\"primary\"\r\n                    onClick={() => handleSubmitAbout(formValues)}\r\n                    // next={() => {\r\n                    //   setEditAbout(false);\r\n                    // }}\r\n                  >\r\n                    <IntlMessages id=\"forms.submit\" />\r\n                  </StateButton>\r\n                </FormGroup>\r\n           \r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n      {/* <CustomInput\r\n        type=\"checkbox\"\r\n        label={<IntlMessages id=\"challenges.terms-and-conditions\" />}\r\n      /> */}\r\n      {/* <Colxx xxs=\"12\" className=\"text-center my-4\">\r\n        <StateButton\r\n          id=\"step-one-button\"\r\n          color=\"primary\"\r\n          onClick={handleSuccessButtonClick}\r\n        >\r\n          <IntlMessages id=\"forms.submit\" />\r\n        </StateButton>\r\n      </Colxx> */}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = ({ history, authUser }) => {\r\n  const { currentUser, profileData } = authUser;\r\n  return { currentUser, profileData, history };\r\n};\r\n\r\nconst mapActionsToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(StepOne);\r\n","/* eslint-disable no-param-reassign */\r\nimport React, { useState } from 'react';\r\nimport {  Wizard } from 'react-albus';\r\nimport { Card, CardBody, Row } from 'reactstrap';\r\nimport { Colxx } from '../../../../components/common/CustomBootstrap';\r\n// import BottomNavigation from '../../../../components/wizard/BottomNavigation';\r\n// import IntlMessages from '../../../../helpers/IntlMessages';\r\nimport useFetch from '../../../../hooks/use-fetch';\r\n\r\nimport CompleteStatus from './complete-status';\r\n import StepFour from './step-four';\r\nimport StepOne from './step-one';\r\n// import StepThree from './step-three';\r\n// import StepTwo from './step-two';\r\n\r\nconst HackWizard = ({ match }) => {\r\n  const { id } = match.params;\r\n\r\n  const [change, setChange] = useState(1);\r\n  const [completePercentage, setCompletePercentage] = useState(0);\r\n  \r\n  console.log(completePercentage);\r\n  // const onClickNext = (goToNext, steps, step) => {\r\n  //   step.isDone = true;\r\n  //   if (steps.length - 1 <= steps.indexOf(step)) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   if (completePercentage + 25 >= 99) {\r\n  //     setCompletePercentage(100);\r\n  //   } else {\r\n  //     setCompletePercentage(completePercentage + 25);\r\n  //   }\r\n\r\n  //   goToNext();\r\n  // };\r\n\r\n  // const onClickPrev = (goToPrev, steps, step) => {\r\n  //   if (steps.indexOf(step) <= 0) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   if (completePercentage - 33 <= 0) {\r\n  //     setCompletePercentage(0);\r\n  //   } else {\r\n  //     setCompletePercentage(completePercentage - 33);\r\n  //   }\r\n\r\n  //   goToPrev();\r\n  // };\r\n\r\n  const { data, loading } = useFetch(`/getdetails/${id}`, false, 'getdetails');\r\n\r\n  if (loading) return <div className=\"loading\" />;\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Colxx xs=\"12\" md=\"8\" className=\"mb-4\">\r\n          <Card>\r\n            <CardBody className=\"wizard wizard-default \">\r\n              <Wizard>\r\n                {change===1 && <StepOne hackData={data} setChange={setChange} setCompletePercentage={setCompletePercentage}/>}\r\n                {change === 2 && <StepFour hackData={data} setCompletePercentage={setCompletePercentage}/>}\r\n                {/* <Steps>\r\n                  <Step\r\n                    id=\"step1\"\r\n                    name={<IntlMessages id=\"challenges.step-1-title\" />}\r\n                  >\r\n                    <StepOne hackData={data} setChange/>\r\n                  </Step>\r\n\r\n                  <Step\r\n                    id=\"step2\"\r\n                    name={<IntlMessages id=\"challenges.step-2-title\" />}\r\n                  >\r\n                    <StepTwo hackData={data} />\r\n                  </Step>\r\n\r\n                  <Step\r\n                    id=\"step3\"\r\n                    name={<IntlMessages id=\"challenges.step-3-title\" />}\r\n                  >\r\n                    <StepThree hackData={data} />\r\n                  </Step>\r\n\r\n                  <Step\r\n                    id=\"step4\"\r\n                    name={<IntlMessages id=\"challenges.step-4-title\" />}\r\n                  >\r\n                    <StepFour />\r\n                  </Step>\r\n\r\n                  <Step id=\"step5\" hideTopNav>\r\n                    <div className=\"wizard-basic-step text-center m-4 pt-4\">\r\n                      <h2 className=\"mb-2\">\r\n                        <IntlMessages id=\"challenges.content-thanks\" />\r\n                      </h2>\r\n                      <p>\r\n                        <i className=\"simple-icon-check h2\" />\r\n                      </p>\r\n                      <p>\r\n                        <IntlMessages id=\"challenges.application-submitted\" />\r\n                      </p>\r\n                    </div>\r\n                  </Step>\r\n                </Steps> */}\r\n\r\n                {/* <BottomNavigation\r\n                  onClickNext={onClickNext}\r\n                  onClickPrev={onClickPrev}\r\n                  className=\"justify-content-between m-4\"\r\n                  prevLabel={<IntlMessages id=\"forms.previous\" />}\r\n                  nextLabel={<IntlMessages id=\"forms.next\" />}\r\n                /> */}\r\n              </Wizard>\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n        <Colxx xs=\"12\" md=\"4\">\r\n                        <CompleteStatus completePercentage={completePercentage} id={id} />\r\n                     </Colxx>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HackWizard;\r\n"],"sourceRoot":""}