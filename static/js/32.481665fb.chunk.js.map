{"version":3,"sources":["components/StateButton.js","hooks/use-fetch.js","components/wizard/BottomNavigation.js","components/application/JoinTeamModal.js","views/app/challenges/hack-wizard/complete-status.js","views/app/challenges/hack-wizard/step-four.js","containers/application/DataDisplay.js","views/app/challenges/hack-wizard/step-one.js","views/app/challenges/hack-wizard/step-three.js","components/common/Rating.js","views/app/challenges/hack-wizard/step-two.js","views/app/challenges/hack-wizard/index.js"],"names":["StateButton","id","className","color","children","onClick","next","useState","status","setStatus","message","setMessage","messageShow","setMessageShow","classnames","then","res","catch","err","finally","setTimeout","disabled","placement","isOpen","target","useFetch","url","refresh","name","loading","setLoading","error","setError","data","setData","useEffect","a","instance","method","response","success","fetchData","propTypes","PropTypes","string","isRequired","bool","BottomNavigation","onClickPrev","prevLabel","onClickNext","nextLabel","render","previous","step","steps","Button","indexOf","length","JoinTeamModal","setOpenModal","code","formValues","setFormValues","ModalHeader","IntlMessages","ModalBody","FormGroup","Label","Input","type","value","question","onChange","event","key","handleChange","ModalFooter","Promise","CompleteStatus","completePercentage","openJoinTeam","setOpenJoinTeam","user_id","getProfileData","handleSubmit","failed","hackathon_id","console","log","addJudge","Card","CardBody","CardTitle","outline","Modal","toggle","StepFour","CustomInput","label","xxs","DataDisplay","messageId","Badge","pill","StepOne","hackathon","hackData","userData","applicationData","JSON","parse","application","applicationAboutData","hackthonApplication","about","filter","includes","applicationContactData","contact","applicationEducationData","education","applicationExpericeData","experience","applicationOnlineProfileData","online_profiles","map","item","databaseKey","StepThree","InputGroup","Star","props","starProps","nameMap","isDisabled","isActive","isActiveHalf","willBeActive","Object","keys","prop","join","defaultProps","Rating","quillModules","toolbar","list","indent","quillFormats","StepTwo","answer1","setAnswer1","answer2","setAnswer2","answer3","setAnswer3","answer4","setAnswer4","theme","val","modules","formats","total","rating","onRate","HackWizard","match","params","setCompletePercentage","Row","xs","md","hideTopNav","goToNext","isDone","goToPrev"],"mappings":"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","file":"static/js/32.481665fb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Popover, PopoverBody } from 'reactstrap';\nimport classnames from 'classnames';\n\nconst StateButton = ({ id, className, color, children, onClick, next }) => {\n  const [status, setStatus] = useState('default');\n  const [message, setMessage] = useState('');\n  const [messageShow, setMessageShow] = useState(false);\n\n  const handleOnClick = () => {\n    setStatus('processing');\n\n    onClick()\n      .then((res) => {\n        setMessage(res);\n        setStatus('success');\n      })\n      .catch((err) => {\n        setMessage(err);\n        setStatus('fail');\n      })\n      .finally(() => {\n        setMessageShow(true);\n        setTimeout(() => {\n          setStatus('default');\n          setMessageShow(false);\n          if (next) {\n            next();\n          }\n        }, 3000);\n      });\n  };\n\n  return (\n    <span>\n      <Button\n        id={id}\n        className={`btn-multiple-state  ${className}  ${classnames({\n          'show-spinner': status === 'processing',\n          'show-success': status === 'success',\n          'show-fail': status === 'fail',\n        })}`}\n        color={color}\n        onClick={handleOnClick}\n        disabled={status !== 'default'}\n      >\n        <Popover placement=\"top\" isOpen={messageShow} target={id}>\n          <PopoverBody>{message}</PopoverBody>\n        </Popover>\n        <span className=\"spinner d-inline-block\">\n          <span className=\"bounce1\" />\n          <span className=\"bounce2\" />\n          <span className=\"bounce3\" />\n        </span>\n        <span className=\"icon success\">\n          <i className=\"simple-icon-check\" />\n        </span>\n        <span className=\"icon fail\">\n          <i className=\"simple-icon-exclamation\" />\n        </span>\n        <span className=\"label\">{children}</span>\n      </Button>\n    </span>\n  );\n};\n\nexport default StateButton;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport instance from '../helpers/axiosInstance';\n\nconst useFetch = (url, refresh = false, name = 'data') => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (!url) {\n      setError('Please Provide a Uri!');\n      return;\n    }\n\n    if (refresh) {\n      setData(false);\n    }\n\n    const fetchData = async () => {\n      try {\n        const response = await instance({\n          method: 'GET',\n          url,\n        });\n\n        if (response.data.success) {\n          setData(response.data[name]);\n        } else {\n          setError(response.data.message);\n        }\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  return { loading, data, error };\n};\n\nexport default useFetch;\n\nuseFetch.propTypes = {\n  url: PropTypes.string.isRequired,\n  refresh: PropTypes.bool,\n};\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { WithWizard } from 'react-albus';\nimport { Button } from 'reactstrap';\n\nconst BottomNavigation = ({\n  className,\n  onClickPrev,\n  prevLabel,\n  onClickNext,\n  nextLabel,\n}) => {\n  return (\n    <WithWizard\n      render={({ next, previous, step, steps }) => (\n        <div className={`wizard-buttons ${className}`}>\n          <Button\n            color=\"primary\"\n            className={`mr-1 ${steps.indexOf(step) <= 0 ? 'disabled' : ''}`}\n            onClick={() => {\n              onClickPrev(previous, steps, step);\n            }}\n          >\n            {prevLabel}\n          </Button>\n\n          <Button\n            color=\"primary\"\n            className={\n              steps.indexOf(step) >= steps.length - 1 ? 'disabled' : ''\n            }\n            onClick={() => {\n              onClickNext(next, steps, step);\n            }}\n          >\n            {nextLabel}\n          </Button>\n        </div>\n      )}\n    />\n  );\n};\nexport default BottomNavigation;\n","/* eslint-disable no-unused-vars */\n\nimport React, { useState } from 'react';\nimport {\n  Button,\n  FormGroup,\n  Input,\n  Label,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from 'reactstrap';\n// import instance from '../../helpers/axiosInstance';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nimport StateButton from '../StateButton';\n\nconst JoinTeamModal = ({ setOpenModal }) => {\n  const [formValues, setFormValues] = useState({\n    code: '',\n  });\n\n  const handleSuccessButtonClick = (newData) => {\n    return new Promise((success) => {\n      setTimeout(() => {\n        success('Everything went right!');\n      }, 1400);\n    });\n  };\n\n  // const handleSubmit = async (newData) => {\n  //   return new Promise((success, failed) => {\n  //     const updateProfile = async () => {\n  //       try {\n  //         const response = await instance({\n  //           method: 'POST',\n  //           url: '/addquestion',\n  //           data: JSON.stringify({ question: [{ ...newData }] }),\n  //           // headers: {\n  //           //   Authorization: `Bearer ${access_token}`,\n  //           // },\n  //         });\n\n  //         const { data } = response;\n  //         console.log(data);\n  //         if (data.success) {\n  //           setFormValues({ ...formValues, ...newData });\n  //           success('Hackathon updated successfully!');\n  //         } else {\n  //           failed('Failed to update hackathon!');\n  //         }\n  //       } catch (error) {\n  //         console.log(error);\n  //         failed('Failed to update hackathon!');\n  //       }\n  //     };\n  //     updateProfile();\n  //   });\n  // };\n\n  const handleChange = (event, key, value = false) => {\n    setFormValues({\n      ...formValues,\n      [key]: value ? event : event.target.value,\n    });\n  };\n\n  return (\n    <>\n      <ModalHeader>\n        <h2 className=\"lead\">\n          <IntlMessages id=\"challenges.modal.join-team-title\" />\n        </h2>\n      </ModalHeader>\n\n      <ModalBody>\n        <FormGroup>\n          <Label>\n            <IntlMessages id=\"challenges.modal.code\" />\n          </Label>\n          <FormGroup>\n            <Input\n              type=\"text\"\n              value={formValues.question}\n              onChange={(event) => handleChange(event, 'code')}\n            />\n          </FormGroup>\n        </FormGroup>\n      </ModalBody>\n\n      <ModalFooter>\n        <StateButton\n          id=\"add-question-buttom\"\n          color=\"secondary\"\n          onClick={() => handleSuccessButtonClick(formValues)}\n        >\n          <IntlMessages id=\"challenges.modal.application-add\" />\n        </StateButton>\n        <Button color=\"danger\" onClick={() => setOpenModal(false)}>\n          <IntlMessages id=\"challenges.modal.application-cancel\" />\n        </Button>\n      </ModalFooter>\n    </>\n  );\n};\n\nexport default JoinTeamModal;\n","/* eslint-disable camelcase */\nimport React, { useState } from 'react';\nimport { Button, Card, CardBody, CardTitle, Modal } from 'reactstrap';\nimport JoinTeamModal from '../../../../components/application/JoinTeamModal';\n\nimport { Separator } from '../../../../components/common/CustomBootstrap';\nimport StateButton from '../../../../components/StateButton';\nimport instance from '../../../../helpers/axiosInstance';\n\nimport IntlMessages from '../../../../helpers/IntlMessages';\nimport { getProfileData } from '../../../../helpers/Utils';\n\nconst CompleteStatus = ({ completePercentage, id }) => {\n  const [openJoinTeam, setOpenJoinTeam] = useState(false);\n\n  const { user_id } = getProfileData();\n\n  const handleSubmit = async () => {\n    return new Promise((success, failed) => {\n      if (completePercentage < 100) {\n        failed('Please Complete the Form!');\n      }\n\n      const addJudge = async () => {\n        try {\n          const response = await instance({\n            method: 'POST',\n            url: '/addparticpant',\n            data: {\n              hackathon_id: id,\n              status: '0',\n\n              user_id,\n            },\n          });\n\n          const { data } = response;\n          if (data.success) {\n            success('Application submitted successfully!');\n          } else {\n            failed('Failed to Submit Application!');\n          }\n        } catch (error) {\n          console.log(error);\n          failed('Failed to update hackathon!');\n        }\n      };\n\n      addJudge();\n    });\n  };\n\n  return (\n    <>\n      <Card>\n        <CardBody className=\"text-center\">\n          <CardTitle>\n            <h2 className=\"lead\">\n              <IntlMessages id=\"challenges.application-not-submitted\" />\n            </h2>\n            <Separator className=\"mb-5\" />\n          </CardTitle>\n          <p>\n            <IntlMessages id=\"challenges.application-filled\" />\n          </p>\n          <h3 className=\"lead\">{completePercentage}%</h3>\n          <p>\n            <IntlMessages id=\"challenges.fill-complete-message\" />\n          </p>\n\n          <StateButton\n            id=\"submit-application\"\n            color=\"primary\"\n            onClick={handleSubmit}\n            className={completePercentage >= 100 ? '' : 'disabled'}\n          >\n            <IntlMessages id=\"challenges.submit-individual-button\" />\n          </StateButton>\n\n          <Separator className=\"mt-4 mb-4\" />\n\n          <Button outline onClick={() => setOpenJoinTeam(true)}>\n            <IntlMessages id=\"challenges.join-team-button\" />\n          </Button>\n\n          <Modal\n            isOpen={openJoinTeam}\n            toggle={() => setOpenJoinTeam(!openJoinTeam)}\n          >\n            <JoinTeamModal setOpenModal={setOpenJoinTeam} />\n          </Modal>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default CompleteStatus;\n","import React from 'react';\nimport { CustomInput } from 'reactstrap';\nimport { Colxx } from '../../../../components/common/CustomBootstrap';\nimport StateButton from '../../../../components/StateButton';\nimport IntlMessages from '../../../../helpers/IntlMessages';\n\nconst StepFour = () => {\n  const handleSuccessButtonClick = () => {\n    return new Promise((success) => {\n      setTimeout(() => {\n        success('Everything went right!');\n      }, 1400);\n    });\n  };\n\n  return (\n    <div className=\"wizard-basic-step m-4 pt-4\">\n      <h6 className=\"lead\">\n        <IntlMessages id=\"challenges.terms-and-conditions-title\" />\n      </h6>\n      <p>\n        <IntlMessages id=\"challenges.terms-and-conditions-text\" />\n      </p>\n\n      <CustomInput\n        type=\"checkbox\"\n        label={<IntlMessages id=\"challenges.terms-and-conditions\" />}\n      />\n\n      <Colxx xxs=\"12\" className=\"text-center my-4\">\n        <StateButton\n          id=\"step-one-button\"\n          color=\"primary\"\n          onClick={handleSuccessButtonClick}\n        >\n          <IntlMessages id=\"forms.submit\" />\n        </StateButton>\n      </Colxx>\n    </div>\n  );\n};\n\nexport default StepFour;\n","import React from 'react';\nimport { Badge } from 'reactstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nconst DataDisplay = ({ messageId, status }) => {\n  return (\n    <div className=\"w-50\">\n      <span\n        className={`mb-0 mr-2 ${\n          status ? 'simple-icon-check ' : 'simple-icon-exclamation'\n        }`}\n      />\n      <Badge\n        color={status ? 'outline-success' : 'outline-danger'}\n        pill\n        className=\"m-2 text-center\"\n      >\n        <IntlMessages id={messageId} />\n      </Badge>\n    </div>\n  );\n};\n\nexport default DataDisplay;\n","import React from 'react';\nimport { Card, CardBody, CardTitle, CustomInput } from 'reactstrap';\nimport {\n  Colxx,\n  Separator,\n} from '../../../../components/common/CustomBootstrap';\nimport StateButton from '../../../../components/StateButton';\nimport { hackthonApplication } from '../../../../constants/defaultValues';\nimport DataDisplay from '../../../../containers/application/DataDisplay';\nimport IntlMessages from '../../../../helpers/IntlMessages';\nimport { getProfileData } from '../../../../helpers/Utils';\n\nconst StepOne = ({ hackData }) => {\n  const { hackathon } = hackData;\n\n  const userData = getProfileData();\n\n  const applicationData = JSON.parse(hackathon.application);\n\n  const applicationAboutData = hackthonApplication.about.filter(({ value }) =>\n    applicationData.about.includes(value)\n  );\n  const applicationContactData = hackthonApplication.contact.filter(\n    ({ value }) => applicationData.contact.includes(value)\n  );\n  const applicationEducationData = hackthonApplication.education.filter(\n    ({ value }) => applicationData.education.includes(value)\n  );\n  const applicationExpericeData = hackthonApplication.experience.filter(\n    ({ value }) => applicationData.experience.includes(value)\n  );\n  const applicationOnlineProfileData = hackthonApplication.online_profiles.filter(\n    ({ value }) => applicationData.online_profiles.includes(value)\n  );\n\n  const handleSuccessButtonClick = () => {\n    return new Promise((success) => {\n      setTimeout(() => {\n        success('Everything went right!');\n      }, 1400);\n    });\n  };\n\n  return (\n    <div className=\"wizard-basic-step m-4 pt-4\">\n      <Card className=\"mb-4\" color=\"secondary\">\n        <CardBody>\n          <CardTitle className=\"d-flex justify-content-between\">\n            <IntlMessages id=\"challenges.step-1\" />\n          </CardTitle>\n        </CardBody>\n      </Card>\n      <h2 className=\"lead\">{hackathon.name}</h2>\n      <p>\n        <IntlMessages id=\"challenges.sub-title\" />\n      </p>\n      <Separator className=\"mb-2\" />\n      <h6 className=\"lead\">\n        <IntlMessages id=\"challenges.about\" />\n      </h6>\n      <p>\n        <IntlMessages id=\"challenges.about-text\" />\n      </p>\n      <div className=\"row\">\n        {applicationAboutData.map((item) => {\n          let status;\n          if (userData[item.databaseKey]) {\n            status = true;\n          } else {\n            status = false;\n          }\n          return (\n            <DataDisplay\n              key={item.id}\n              messageId={item.messageId}\n              status={status}\n            />\n          );\n        })}\n      </div>\n      <Separator className=\"my-4\" />\n\n      <h6 className=\"lead\">\n        <IntlMessages id=\"challenges.experience\" />\n      </h6>\n      <p>\n        <IntlMessages id=\"challenges.experience-text\" />\n      </p>\n      <div className=\"row\">\n        {applicationExpericeData.map((item) => {\n          let status;\n          if (userData[item.databaseKey]) {\n            status = true;\n          } else {\n            status = false;\n          }\n          return (\n            <DataDisplay\n              key={item.id}\n              messageId={item.messageId}\n              status={status}\n            />\n          );\n        })}\n      </div>\n      <Separator className=\"my-4\" />\n\n      <h6 className=\"lead\">\n        <IntlMessages id=\"challenges.education\" />\n      </h6>\n      <div className=\"row\">\n        {applicationEducationData.map((item) => {\n          let status;\n          if (userData[item.databaseKey]) {\n            status = true;\n          } else {\n            status = false;\n          }\n          return (\n            <DataDisplay\n              key={item.id}\n              messageId={item.messageId}\n              status={status}\n            />\n          );\n        })}\n      </div>\n      <Separator className=\"my-4\" />\n\n      <h6 className=\"lead\">\n        <IntlMessages id=\"challenges.links\" />\n      </h6>\n      <p>\n        <IntlMessages id=\"challenges.links-text\" />\n      </p>\n      <div className=\"row\">\n        {applicationOnlineProfileData.map((item) => {\n          let status;\n          if (userData[item.databaseKey]) {\n            status = true;\n          } else {\n            status = false;\n          }\n          return (\n            <DataDisplay\n              key={item.id}\n              messageId={item.messageId}\n              status={status}\n            />\n          );\n        })}\n      </div>\n\n      <Separator className=\"my-4\" />\n\n      <h6 className=\"lead\">\n        <IntlMessages id=\"challenges.contact\" />\n      </h6>\n      <p>\n        <IntlMessages id=\"challenges.contact-text\" />\n      </p>\n      <div className=\"row\">\n        {applicationContactData.map((item) => {\n          let status;\n          if (userData[item.databaseKey]) {\n            status = true;\n          } else {\n            status = false;\n          }\n          return (\n            <DataDisplay\n              key={item.id}\n              messageId={item.messageId}\n              status={status}\n            />\n          );\n        })}\n      </div>\n      <Separator className=\"my-4\" />\n\n      <CustomInput\n        type=\"checkbox\"\n        label={<IntlMessages id=\"challenges.terms-and-conditions\" />}\n      />\n      <Colxx xxs=\"12\" className=\"text-center my-4\">\n        <StateButton\n          id=\"step-one-button\"\n          color=\"primary\"\n          onClick={handleSuccessButtonClick}\n        >\n          <IntlMessages id=\"forms.submit\" />\n        </StateButton>\n      </Colxx>\n    </div>\n  );\n};\n\nexport default StepOne;\n","import React from 'react';\nimport { Card, CardBody, CardTitle, CustomInput, InputGroup } from 'reactstrap';\nimport { Colxx } from '../../../../components/common/CustomBootstrap';\nimport StateButton from '../../../../components/StateButton';\nimport IntlMessages from '../../../../helpers/IntlMessages';\n\nconst StepThree = () => {\n  const handleSuccessButtonClick = () => {\n    return new Promise((success) => {\n      setTimeout(() => {\n        success('Everything went right!');\n      }, 1400);\n    });\n  };\n\n  return (\n    <div className=\"wizard-basic-step m-4 pt-4\">\n      <Card className=\"mb-4\" color=\"secondary\">\n        <CardBody>\n          <CardTitle className=\"d-flex justify-content-between mt-2\">\n            <IntlMessages id=\"challenges.step-3\" />\n          </CardTitle>\n        </CardBody>\n      </Card>\n\n      <div className=\"mb-4\">\n        <h6 className=\"lead\">\n          <IntlMessages id=\"challenges.step-3-question-1\" />\n        </h6>\n        <InputGroup>\n          <CustomInput\n            type=\"radio\"\n            name=\"participatedInHack\"\n            id=\"Yes\"\n            className=\"p-4\"\n            label=\"Yes\"\n          />\n          <CustomInput\n            type=\"radio\"\n            name=\"participatedInHack\"\n            id=\"No\"\n            className=\"p-4\"\n            label=\"No\"\n          />\n        </InputGroup>\n      </div>\n\n      <Colxx xxs=\"12\" className=\"text-center my-4\">\n        <StateButton\n          id=\"step-one-button\"\n          color=\"primary\"\n          onClick={handleSuccessButtonClick}\n        >\n          <IntlMessages id=\"forms.submit\" />\n        </StateButton>\n      </Colxx>\n    </div>\n  );\n};\n\nexport default StepThree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rater from 'react-rater';\nimport 'react-rater/lib/react-rater.css';\n\nconst Rating = (props) => (\n  <Rater {...props}>\n    <Star />\n  </Rater>\n);\n\nconst Star = (props) => {\n  const starProps = { ...props };\n  const nameMap = {\n    isDisabled: 'is-disabled',\n    isActive: 'is-active',\n    isActiveHalf: 'is-active-half',\n    willBeActive: 'will-be-active',\n  };\n\n  const className = Object.keys(nameMap)\n    // eslint-disable-next-line\n    .filter((prop) => (delete starProps[prop], props[prop]))\n    .map((prop) => nameMap[prop])\n    .join(' ');\n  return <div className={`react-rater-star ${className}`} {...starProps} />;\n};\n\nStar.defaultProps = {\n  willBeActive: false,\n  isActive: false,\n  isActiveHalf: false,\n  isDisabled: false,\n};\n\nStar.propTypes = {\n  isActive: PropTypes.bool,\n  isActiveHalf: PropTypes.bool,\n  willBeActive: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n};\n\nexport default Rating;\n","import React, { useState } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { Card, CardBody, CardTitle } from 'reactstrap';\nimport { Colxx } from '../../../../components/common/CustomBootstrap';\nimport Rating from '../../../../components/common/Rating';\nimport StateButton from '../../../../components/StateButton';\nimport IntlMessages from '../../../../helpers/IntlMessages';\n\nconst quillModules = {\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n    [\n      { list: 'ordered' },\n      { list: 'bullet' },\n      { indent: '-1' },\n      { indent: '+1' },\n    ],\n    ['link', 'image'],\n    ['clean'],\n  ],\n};\n\nconst quillFormats = [\n  'header',\n  'bold',\n  'italic',\n  'underline',\n  'strike',\n  'blockquote',\n  'list',\n  'bullet',\n  'indent',\n  'link',\n  'image',\n];\n\nconst StepTwo = () => {\n  const [answer1, setAnswer1] = useState('');\n  const [answer2, setAnswer2] = useState('');\n  const [answer3, setAnswer3] = useState('');\n  const [answer4, setAnswer4] = useState(0);\n\n  const handleSuccessButtonClick = () => {\n    return new Promise((success) => {\n      setTimeout(() => {\n        success('Everything went right!');\n      }, 1400);\n    });\n  };\n\n  return (\n    <div className=\"wizard-basic-step m-4 pt-4\">\n      <Card className=\"mb-4\" color=\"secondary\">\n        <CardBody>\n          <CardTitle className=\"d-flex justify-content-between mt-2\">\n            <IntlMessages id=\"challenges.step-2\" />\n          </CardTitle>\n        </CardBody>\n      </Card>\n      <div className=\"mb-4\">\n        <h6>\n          <IntlMessages id=\"challenges.step-2-question-1\" />\n        </h6>\n        <ReactQuill\n          theme=\"snow\"\n          value={answer1}\n          onChange={(val) => setAnswer1(val)}\n          modules={quillModules}\n          formats={quillFormats}\n        />\n      </div>\n      <div className=\"mb-4\">\n        <h6>\n          <IntlMessages id=\"challenges.step-2-question-2\" />\n        </h6>\n        <ReactQuill\n          theme=\"snow\"\n          value={answer2}\n          onChange={(val) => setAnswer2(val)}\n          modules={quillModules}\n          formats={quillFormats}\n        />\n      </div>\n\n      <div className=\"mb-4\">\n        <h6>\n          <IntlMessages id=\"challenges.step-2-question-3\" />\n        </h6>\n        <ReactQuill\n          theme=\"snow\"\n          value={answer3}\n          onChange={(val) => setAnswer3(val)}\n          modules={quillModules}\n          formats={quillFormats}\n        />\n      </div>\n\n      <div className=\"mb-4\">\n        <h6>\n          <IntlMessages id=\"challenges.step-2-question-4\" />\n        </h6>\n        <Rating\n          total={5}\n          rating={answer4}\n          onRate={({ rating }) => setAnswer4(rating)}\n        />\n      </div>\n\n      <Colxx xxs=\"12\" className=\"text-center my-4\">\n        <StateButton\n          id=\"step-one-button\"\n          color=\"primary\"\n          onClick={handleSuccessButtonClick}\n        >\n          <IntlMessages id=\"forms.submit\" />\n        </StateButton>\n      </Colxx>\n    </div>\n  );\n};\n\nexport default StepTwo;\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport { Step, Steps, Wizard } from 'react-albus';\nimport { Card, CardBody, Row } from 'reactstrap';\nimport { Colxx } from '../../../../components/common/CustomBootstrap';\nimport BottomNavigation from '../../../../components/wizard/BottomNavigation';\nimport IntlMessages from '../../../../helpers/IntlMessages';\nimport useFetch from '../../../../hooks/use-fetch';\n\nimport CompleteStatus from './complete-status';\nimport StepFour from './step-four';\nimport StepOne from './step-one';\nimport StepThree from './step-three';\nimport StepTwo from './step-two';\n\nconst HackWizard = ({ match }) => {\n  const { id } = match.params;\n\n  const [completePercentage, setCompletePercentage] = useState(0);\n\n  const onClickNext = (goToNext, steps, step) => {\n    step.isDone = true;\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n\n    if (completePercentage + 25 >= 99) {\n      setCompletePercentage(100);\n    } else {\n      setCompletePercentage(completePercentage + 25);\n    }\n\n    goToNext();\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n\n    if (completePercentage - 33 <= 0) {\n      setCompletePercentage(0);\n    } else {\n      setCompletePercentage(completePercentage - 33);\n    }\n\n    goToPrev();\n  };\n\n  const { data, loading } = useFetch(`/getdetails/${id}`, false, 'getdetails');\n\n  if (loading) return <div className=\"loading\" />;\n\n  return (\n    <>\n      <Row>\n        <Colxx xs=\"12\" md=\"8\" className=\"mb-4\">\n          <Card>\n            <CardBody className=\"wizard wizard-default \">\n              <Wizard>\n                <Steps>\n                  <Step\n                    id=\"step1\"\n                    name={<IntlMessages id=\"challenges.step-1-title\" />}\n                  >\n                    <StepOne hackData={data} />\n                  </Step>\n\n                  <Step\n                    id=\"step2\"\n                    name={<IntlMessages id=\"challenges.step-2-title\" />}\n                  >\n                    <StepTwo hackData={data} />\n                  </Step>\n\n                  <Step\n                    id=\"step3\"\n                    name={<IntlMessages id=\"challenges.step-3-title\" />}\n                  >\n                    <StepThree hackData={data} />\n                  </Step>\n\n                  <Step\n                    id=\"step4\"\n                    name={<IntlMessages id=\"challenges.step-4-title\" />}\n                  >\n                    <StepFour />\n                  </Step>\n\n                  <Step id=\"step5\" hideTopNav>\n                    <div className=\"wizard-basic-step text-center m-4 pt-4\">\n                      <h2 className=\"mb-2\">\n                        <IntlMessages id=\"challenges.content-thanks\" />\n                      </h2>\n                      <p>\n                        <i className=\"simple-icon-check h2\" />\n                      </p>\n                      <p>\n                        <IntlMessages id=\"challenges.application-submitted\" />\n                      </p>\n                    </div>\n                  </Step>\n                </Steps>\n\n                <BottomNavigation\n                  onClickNext={onClickNext}\n                  onClickPrev={onClickPrev}\n                  className=\"justify-content-between m-4\"\n                  prevLabel={<IntlMessages id=\"forms.previous\" />}\n                  nextLabel={<IntlMessages id=\"forms.next\" />}\n                />\n              </Wizard>\n            </CardBody>\n          </Card>\n        </Colxx>\n        <Colxx xs=\"12\" md=\"4\">\n          <CompleteStatus completePercentage={completePercentage} id={id} />\n        </Colxx>\n      </Row>\n    </>\n  );\n};\n\nexport default HackWizard;\n"],"sourceRoot":""}