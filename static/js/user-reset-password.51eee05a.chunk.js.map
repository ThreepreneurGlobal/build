{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","hooks/use-request.js","views/user/reset-password.js","views/user/reset-password-otp.js","views/user/verify-otp.js","views/user/complete-registration/profile-form.js","views/user/complete-registration/index.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","validateNewPassword","values","newPassword","newPasswordAgain","errors","connect","authUser","resetPasswordCode","resetPasswordAction","resetPassword","history","OTP","useEffect","NotificationManager","warning","initialValues","xxs","md","to","id","validate","onSubmit","touched","name","type","color","size","mapActionToProps","verifyOTPAction","verifyOTP","ResendButton","load","email","window","localStorage","getItem","location","reload","doRequest","onClick","date","Date","now","renderer","hours","minutes","seconds","completed","disabled","zeroPad","MemoizedResendOTPButton","memo","MyTextArea","useField","field","meta","validateName","value","length","validateEmail","test","ProfileForm","addProfileAction","currentUser","Card","CardBody","CardTitle","IntlMessages","phoneNumber","phone_number","profile","userID","contactNo","FormGroup","Label","fullName","rows","Button","addProfileData","message","about","Row"],"mappings":"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","file":"static/js/user-reset-password.51eee05a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\r\n\r\nexport default injectIntl(InjectMassage, {\r\n  withRef: false,\r\n});\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst Colxx = (props) => (\r\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = ({ className }) => (\r\n  <div className={`separator ${className}`} />\r\n);\r\nexport { Colxx, Separator };\r\n","import { useState } from 'react';\r\nimport instance from '../helpers/axiosInstance';\r\nimport { log } from '../helpers/Utils';\r\n\r\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\r\n  const [responseData, setData] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const doRequest = async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      const response = await instance({\r\n        url,\r\n        method,\r\n        headers,\r\n        data,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        if (nextSuccess) {\r\n          nextSuccess(response.data);\r\n        }\r\n        setLoading(false);\r\n        setData(response.data.data);\r\n      } else {\r\n        if (nextError) {\r\n          nextError(response.data.error);\r\n        }\r\n        setLoading(false);\r\n        setError(response.data.error);\r\n      }\r\n    } catch (err) {\r\n      log(err);\r\n      setLoading(false);\r\n      setError(err);\r\n    }\r\n  };\r\n\r\n  return [doRequest, loading, error, responseData];\r\n};\r\n\r\nexport default useRequest;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { resetPassword } from '../../redux/actions';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\n\r\nconst validateNewPassword = (values) => {\r\n  const { newPassword, newPasswordAgain } = values;\r\n  const errors = {};\r\n  if (newPasswordAgain && newPassword !== newPasswordAgain) {\r\n    errors.newPasswordAgain = 'Please check your new password';\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst ResetPassword = ({\r\n  history,\r\n  loading,\r\n  error,\r\n  resetPasswordAction,\r\n}) => {\r\n  const [OTP] = useState('');\r\n  const [newPassword] = useState('');\r\n  const [newPasswordAgain] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.warning(\r\n        error,\r\n        'Forgot Password Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    } else if (!loading && newPassword === 'success')\r\n      NotificationManager.success(\r\n        'Please login with your new password.',\r\n        'Reset Password Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n  }, [error, loading, newPassword]);\r\n\r\n  const onResetPassword = (values) => {\r\n    if (!loading) {\r\n        if (values.newPassword !== '' && values.OTP !== '') {\r\n          resetPasswordAction({\r\n            OTP : values.OTP,\r\n            newPassword: values.newPassword,\r\n            history,\r\n          });\r\n        }\r\n      \r\n    }\r\n  };\r\n\r\n  const initialValues = { OTP, newPassword, newPasswordAgain };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">\r\n              Please use your e-mail to reset your password. <br />\r\n              If you are not a member, please{' '}\r\n              <NavLink to=\"/register\" className=\"white\">\r\n                register\r\n              </NavLink>\r\n              .\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <NavLink to=\"/\" className=\"white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.reset-password\" />\r\n            </CardTitle>\r\n\r\n            <Formik\r\n              validate={validateNewPassword}\r\n              initialValues={initialValues}\r\n              onSubmit={onResetPassword}\r\n            >\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.otp\" />\r\n                    </Label>\r\n                    <Field \r\n                      className=\"form-control\" \r\n                      name=\"OTP\" \r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.new-password\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"newPassword\"\r\n                      type=\"password\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.new-password-again\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"newPasswordAgain\"\r\n                      type=\"password\"\r\n                    />\r\n                    {errors.newPasswordAgain && touched.newPasswordAgain && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.newPasswordAgain}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <NavLink to=\"/user/login\">\r\n                      <IntlMessages id=\"user.login-title\" />\r\n                    </NavLink>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.reset-password-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { newPassword, resetPasswordCode, loading, error } = authUser;\r\n  return { newPassword, resetPasswordCode, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  resetPasswordAction: resetPassword,\r\n})(ResetPassword);\r\n","import React, { /* memo, */ useEffect, useState } from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { Formik, Form, Field } from 'formik';\r\n// import Countdown, { zeroPad } from 'react-countdown';\r\nimport { connect } from 'react-redux';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { verifyOTP } from '../../redux/actions';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\n// import useRequest from '../../hooks/use-request';\r\nimport resetPassword from './reset-password';\r\n// const ResendButton = () => {\r\n//   const [doRequest] = useRequest({\r\n//     url: '/resendOtp',\r\n//     method: 'POST',\r\n//     data: {\r\n//       email: '',\r\n//     },\r\n//     nextSuccess: () => {\r\n//       NotificationManager.success(\r\n//         'OTP reset Successful!',\r\n//         'Verify OTP Success',\r\n//         3000,\r\n//         null,\r\n//         null,\r\n//         ''\r\n//       );\r\n//     },\r\n//   });\r\n//   const onClick = () => doRequest();\r\n//   const renderer = ({ hours, minutes, seconds, completed }) => {\r\n//     // Render a countdown\r\n//     return (\r\n//       <Button\r\n//         className=\"btn-shadow btn btn-primary btn-lg mx-2\"\r\n//         onClick={completed ? onClick : () => {}}\r\n//         disabled={!completed}\r\n//       >\r\n//         {completed\r\n//           ? 'Resend OTP'\r\n//           : `${zeroPad(hours)}:${zeroPad(minutes)}:${zeroPad(seconds)}`}\r\n//       </Button>\r\n//     );\r\n//   };\r\n\r\n//   return <Countdown date={Date.now() + 30000} renderer={renderer} />;\r\n// };\r\n\r\n// // const MemoizedResendOTPButton = memo(ResendButton);\r\n\r\nconst VerifyOTP = ({ loading, error }) => {\r\n  const [OTP] = useState('');\r\n\r\n  const onVerifyOTP = (values) => {\r\n    if (values.OTP !== '') {\r\n      <resetPassword \r\n        OTP = {values.OTP}\r\n      />\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.error(\r\n        error,\r\n        'OTP Verification Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n  }, [error]);\r\n\r\n  const initialValues = { OTP };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">\r\n              Please enter the OTP sent to your email. <br />\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <span className=\"logo-single\" />\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.verify-otp\" />\r\n            </CardTitle>\r\n\r\n            <Formik initialValues={initialValues} onSubmit={onVerifyOTP}>\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.otp\" />\r\n                    </Label>\r\n                    <Field className=\"form-control\" name=\"OTP\" />\r\n                    {errors.OTP && touched.OTP && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.OTP}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <div className=\"d-flex justify-content-end align-items-center\">\r\n                    \r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.verify-otp-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { OTP, loading, error } = authUser;\r\n  return { OTP, loading, error };\r\n};\r\n\r\nconst mapActionToProps = {\r\n  verifyOTPAction: verifyOTP,\r\n};\r\nexport default connect(mapStateToProps, mapActionToProps)(VerifyOTP);\r\n","import React, { memo, useEffect, useState } from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport Countdown, { zeroPad } from 'react-countdown';\r\nimport { connect } from 'react-redux';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { verifyOTP } from '../../redux/actions';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\nimport useRequest from '../../hooks/use-request';\r\n\r\nconst ResendButton = () => {\r\n  const load = {\r\n    email: window.localStorage.getItem('_email'),\r\n  };\r\n  const [doRequest] = useRequest({\r\n    url: '/auth/resendOtp',\r\n    method: 'POST',\r\n    data: load,\r\n    nextSuccess: () => {\r\n      NotificationManager.success(\r\n        'OTP reset Successful!',\r\n        'Verify OTP Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n      window.location.reload();\r\n    },\r\n  });\r\n  const onClick = () => {\r\n    doRequest();\r\n  };\r\n  const renderer = ({ hours, minutes, seconds, completed }) => {\r\n    // Render a countdown\r\n    return (\r\n      <Button\r\n        className=\"btn-shadow btn btn-primary btn-lg mx-2\"\r\n        onClick={completed ? onClick : () => {}}\r\n        disabled={!completed}\r\n      >\r\n        {completed\r\n          ? 'Resend OTP'\r\n          : `${zeroPad(hours)}:${zeroPad(minutes)}:${zeroPad(seconds)}`}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return <Countdown date={Date.now() + 30000} renderer={renderer} />;\r\n};\r\n\r\nconst MemoizedResendOTPButton = memo(ResendButton);\r\n\r\nconst VerifyOTP = ({ history, loading, error, verifyOTPAction }) => {\r\n  const [OTP] = useState('');\r\n\r\n  const onVerifyOTP = (values) => {\r\n    if (values.OTP !== '') {\r\n      verifyOTPAction({ ...values, history });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.error(\r\n        error,\r\n        'OTP Verification Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n  }, [error]);\r\n\r\n  const initialValues = { OTP };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">\r\n              Please enter the OTP sent to your email. <br />\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <span className=\"logo-single\" />\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.verify-otp\" />\r\n            </CardTitle>\r\n\r\n            <Formik initialValues={initialValues} onSubmit={onVerifyOTP}>\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.otp\" />\r\n                    </Label>\r\n                    <Field className=\"form-control\" name=\"OTP\" />\r\n                    {errors.OTP && touched.OTP && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.OTP}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <div className=\"d-flex justify-content-end align-items-center\">\r\n                    <MemoizedResendOTPButton />\r\n\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.verify-otp-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { OTP, loading, error } = authUser;\r\n  return { OTP, loading, error };\r\n};\r\n\r\nconst mapActionToProps = {\r\n  verifyOTPAction: verifyOTP,\r\n};\r\nexport default connect(mapStateToProps, mapActionToProps)(VerifyOTP);\r\n","import React from 'react';\r\nimport { Formik, Form, Field,useField } from 'formik';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Label,\r\n  Button,\r\n  CardTitle,\r\n} from 'reactstrap';\r\nimport IntlMessages from '../../../helpers/IntlMessages';\r\n\r\nconst MyTextArea = ({ ...props}) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n      <>\r\n         \r\n          <textarea className=\"text-area\" {...field} {...props} />\r\n          {meta.touched && meta.error ? (\r\n              <div className=\"error\">{meta.error}</div>\r\n          ) : null}\r\n      </>\r\n  );\r\n};\r\n\r\n\r\nconst validateName = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your name';\r\n  } else if (value.length < 2) {\r\n    error = 'Value must be longer than 2 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validateEmail = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your email address';\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n    error = 'Invalid email address';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst ProfileForm = ({\r\n  addProfileAction,\r\n  history,\r\n  currentUser,\r\n  initialValues,\r\n  loading,\r\n}) => {\r\n  const onAddProfile = (values) => {\r\n    const { id, phone_number: phoneNumber } = currentUser;\r\n    \r\n    const profile = {\r\n      ...values,\r\n      userID: id,\r\n      contactNo: phoneNumber,\r\n    };\r\n  addProfileAction({ profile, history });\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"wizard-basic-step\">\r\n        <CardTitle className=\"mb-4\">\r\n          <h2 className=\"lead\">\r\n            <IntlMessages id=\"user.profile-form\" />\r\n          </h2>\r\n        </CardTitle>\r\n        <Formik initialValues={initialValues} onSubmit={onAddProfile}>\r\n          {({ errors, touched }) => (\r\n            <Form className=\"av-tooltip tooltip-label-right\">\r\n              <FormGroup>\r\n                <Label>\r\n                  <IntlMessages id=\"user.fullname\" />\r\n                </Label>\r\n                <Field\r\n                  className=\"form-control\"\r\n                  name=\"fullName\"\r\n                  validate={validateName}\r\n                />\r\n                {errors.fullName && touched.fullName && (\r\n                  <div className=\"invalid-feedback d-block\">\r\n                    {errors.fullName}\r\n                  </div>\r\n                )}\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label>\r\n                  <IntlMessages id=\"user.email\" />\r\n                </Label>\r\n                <Field\r\n                  className=\"form-control\"\r\n                  name=\"email\"\r\n                  validate={validateEmail}\r\n                />\r\n                {errors.name && touched.name && (\r\n                  <div className=\"invalid-feedback d-block\">{errors.name}</div>\r\n                )}\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label>\r\n                  <IntlMessages id=\"about\" />\r\n                </Label>\r\n              \r\n                <MyTextArea \r\n                  className=\"form-control\"\r\n                  name=\"about\"\r\n                  rows=\"6\"\r\n                />\r\n                      \r\n                {errors.name && touched.name && (\r\n                      <div className=\"invalid-feedback d-block\">{errors.name}</div>\r\n                    )}\r\n              </FormGroup>\r\n\r\n\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <Button\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className={`btn-shadow btn-multiple-state ${\r\n                    loading ? 'show-spinner' : ''\r\n                  }`}\r\n                  size=\"lg\"\r\n                >\r\n                  <span className=\"spinner d-inline-block\">\r\n                    <span className=\"bounce1\" />\r\n                    <span className=\"bounce2\" />\r\n                    <span className=\"bounce3\" />\r\n                  </span>\r\n                  <span className=\"label\">\r\n                    <IntlMessages id=\"forms.submit\" />\r\n                  </span>\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n","/* eslint-disable camelcase */\r\nimport React, { useEffect, useState } from 'react';\r\nimport {  Row } from 'reactstrap';\r\nimport { Wizard } from 'react-albus';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addProfileData } from '../../../redux/actions';\r\nimport { NotificationManager } from '../../../components/common/react-notifications';\r\nimport ProfileForm from './profile-form';\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\n// import TopNavigation from '../../../components/wizard/TopNavigation';\r\n\r\n// import ThankYouForm from './thank-you-form';\r\n// import BottomNavigation from '../../../components/wizard/BottomNavigation';\r\n\r\nconst CompleteRegistration = ({\r\n  history,\r\n  loading,\r\n  error,\r\n  currentUser,\r\n  message,\r\n  addProfileAction,\r\n}) => {\r\n  const [fullName] = useState('');\r\n  const [email] = useState('');\r\n  const [about] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.error(\r\n        error,\r\n        'Registration Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n      if (!loading && message === 'New profile added') {\r\n        NotificationManager.success(\r\n          'Click next',\r\n          'Profile Added Successfully',\r\n          3000,\r\n          null,\r\n          null,\r\n          ''\r\n        );\r\n    }\r\n  }, [loading, error,message]);\r\n\r\n  const initialValues = {\r\n    fullName,\r\n    email,\r\n    about,\r\n  };\r\n\r\n  // const topNavClick = (stepItem, push) => {\r\n  //   push(stepItem.id);\r\n  // };\r\n\r\n  // const onClickNext = (goToNext, steps, step) => {\r\n  //   // eslint-disable-next-line no-param-reassign\r\n  //   step.isDone = true;\r\n  //   if (steps.length - 1 <= steps.indexOf(step)) {\r\n  //     return;\r\n  //   }\r\n  //   goToNext();\r\n  // };\r\n\r\n  // const onClickPrev = (goToPrev, steps, step) => {\r\n  //   if (steps.indexOf(step) <= 0) {\r\n  //     return;\r\n  //   }\r\n  //   goToPrev();\r\n  // };\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"8\" className=\"mx-auto my-auto wizard wizard-default\">\r\n        <Wizard>\r\n          {/* <TopNavigation\r\n            className=\"justify-content-around\"\r\n            disableNav={false}\r\n            topNavClick={topNavClick}\r\n          /> */}\r\n          {/* <Steps>\r\n            <Step id=\"profile-form\"> */}\r\n              <ProfileForm\r\n                addProfileAction={addProfileAction}\r\n                history={history}\r\n                currentUser={currentUser}\r\n                initialValues={initialValues}\r\n                message={message}\r\n                loading={loading}\r\n              />\r\n            {/* </Step>\r\n\r\n            <Step id=\"thank-you\">\r\n              <ThankYouForm \r\n                currentUser={currentUser}\r\n              />\r\n            </Step>\r\n          </Steps>\r\n\r\n          <Card className=\"mt-4\">\r\n            <CardBody>\r\n              <BottomNavigation\r\n                className=\"justify-content-between\"\r\n                onClickPrev={onClickPrev}\r\n                prevLabel=\"Previous\"\r\n                onClickNext={onClickNext}\r\n                nextLabel=\"Next\"\r\n              />\r\n            </CardBody>\r\n          </Card> */}\r\n        </Wizard>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { loading, error, message, currentUser } = authUser;\r\n  return { loading, error,message, currentUser };\r\n};\r\n\r\nconst mapActionToProps = {\r\n  addProfileAction: addProfileData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(CompleteRegistration);\r\n"],"sourceRoot":""}