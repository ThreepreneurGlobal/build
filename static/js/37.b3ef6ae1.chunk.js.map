{"version":3,"sources":["components/StateButton.js","hooks/use-fetch.js","components/common/CustomSelectInput.js","components/application/JoinTeamModal.js","views/app/challenges/hack-wizard/complete-status.js","views/app/challenges/hack-wizard/step-four.js","views/app/challenges/hack-wizard/step-one.js","views/app/challenges/hack-wizard/index.js"],"names":["StateButton","id","className","color","children","onClick","next","successNext","useState","status","setStatus","message","setMessage","messageShow","setMessageShow","classnames","then","res","catch","err","finally","setTimeout","disabled","placement","isOpen","target","defaultProps","useFetch","url","refresh","name","loading","setLoading","error","setError","data","setData","useEffect","a","instance","method","response","success","fetchData","propTypes","PropTypes","string","isRequired","bool","CustomSelectInput","props","customProps","autoCorrect","autoCapitalize","Input","JoinTeamModal","setOpenModal","code","formValues","setFormValues","ModalHeader","IntlMessages","ModalBody","FormGroup","Label","type","value","question","onChange","event","key","handleChange","ModalFooter","Promise","Button","CompleteStatus","completePercentage","history","useHistory","openJoinTeam","setOpenJoinTeam","user_id","getProfileData","handleSubmit","failed","console","log","hackathon_id","wait","push","adminRoot","addJudge","Card","CardBody","CardTitle","window","location","href","outline","Modal","toggle","StepFour","setCompletePercentage","hackData","conditionsAccepted","setAccepted","responseData","setResponseData","profileData","count","answer1","answer2","answer3","answer4","answer5","answer6","answer7","answer8","answer9","answer10","values","setValues","handleSuccessButtonClick","custom_questions","forEach","item","index","ans","temp","question_id","customized_questions","answer","spar","hackathon","responses","resolve","_","reject","style","height","overflowY","tnc","CustomInput","label","checked","map","undefined","Row","xxs","placeholder","connect","authUser","currentUser","setChange","email","id2","noFormalEducation","setNoFormalEducation","currentlyStudyHere","setCurrentlyStudyHere","noExperience","setNoExperience","full_name","gender","tshirt_size","contact_no","bio","degree_type","education_institution","field_of_study","month_of_graduation","Date","getMonth","year_of_graduation","getFullYear","employer","role","joining_data","leaving_data","job_description","facebook","github","linkedin","instagram","city","startDate","setStartDate","handleSubmitAbout","newData","NotificationManager","setProfileData","md","components","classNamePrefix","defaultInputValue","selectedOption","options","genderOptions","shirtSizeOptions","rows","selected","date","input","dateFormat","showMonthYearPicker","JSON","stringify","showYearPicker","InputGroup","InputGroupAddon","addonType","title","HackWizard","match","params","change","setResponse","check","setCheck","xs"],"mappings":"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","file":"static/js/37.b3ef6ae1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popover, PopoverBody } from 'reactstrap';\nimport classnames from 'classnames';\n\nconst StateButton = ({\n  id,\n  className,\n  color,\n  children,\n  onClick,\n  next,\n  successNext,\n}) => {\n  const [status, setStatus] = useState('default');\n  const [message, setMessage] = useState('');\n  const [messageShow, setMessageShow] = useState(false);\n\n  const handleOnClick = () => {\n    setStatus('processing');\n\n    onClick()\n      .then((res) => {\n        setMessage(res);\n        setStatus('success');\n        if (successNext) {\n          successNext();\n        }\n      })\n      .catch((err) => {\n        setMessage(err);\n        setStatus('fail');\n      })\n      .finally(() => {\n        setMessageShow(true);\n        setTimeout(() => {\n          setStatus('default');\n          setMessageShow(false);\n          if (next) {\n            next();\n          }\n        }, 3000);\n      });\n  };\n\n  return (\n    <span>\n      <Button\n        id={id}\n        className={`btn-multiple-state  ${className}  ${classnames({\n          'show-spinner': status === 'processing',\n          'show-success': status === 'success',\n          'show-fail': status === 'fail',\n        })}`}\n        color={color}\n        onClick={handleOnClick}\n        disabled={status !== 'default'}\n      >\n        <Popover placement=\"top\" isOpen={messageShow} target={id}>\n          <PopoverBody>{message}</PopoverBody>\n        </Popover>\n        <span className=\"spinner d-inline-block\">\n          <span className=\"bounce1\" />\n          <span className=\"bounce2\" />\n          <span className=\"bounce3\" />\n        </span>\n        <span className=\"icon success\">\n          <i className=\"simple-icon-check\" />\n        </span>\n        <span className=\"icon fail\">\n          <i className=\"simple-icon-exclamation\" />\n        </span>\n        <span className=\"label\">{children}</span>\n      </Button>\n    </span>\n  );\n};\n\nStateButton.propTypes = {\n  id: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  color: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  onClick: PropTypes.func.isRequired,\n  next: PropTypes.func,\n  successNext: PropTypes.func,\n};\n\nStateButton.defaultProps = {\n  className: '',\n  children: null,\n  next: null,\n  successNext: null,\n};\n\nexport default StateButton;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport instance from '../helpers/axiosInstance';\n\nconst useFetch = (url, refresh = false, name = 'data') => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (!url) {\n      setError('Please Provide a Uri!');\n      return;\n    }\n\n    if (refresh) {\n      setData(false);\n    }\n\n    const fetchData = async () => {\n      try {\n        const response = await instance({\n          method: 'GET',\n          url,\n        });\n\n        if (response.data.success) {\n          setData(response.data[name]);\n        } else {\n          setError(response.data.message);\n        }\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  return { loading, data, error };\n};\n\nexport default useFetch;\n\nuseFetch.propTypes = {\n  url: PropTypes.string.isRequired,\n  refresh: PropTypes.bool,\n};\n","import React from 'react';\nimport { components } from 'react-select';\n\nconst CustomSelectInput = (props) => {\n  const customProps = { ...props };\n  delete customProps.autoCorrect;\n  delete customProps.autoCapitalize;\n  return <components.Input {...customProps} />;\n};\n\nexport default CustomSelectInput;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  FormGroup,\n  Input,\n  Label,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from 'reactstrap';\n// import instance from '../../helpers/axiosInstance';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nimport StateButton from '../StateButton';\n\nconst JoinTeamModal = ({ setOpenModal }) => {\n  const [formValues, setFormValues] = useState({\n    code: '',\n  });\n\n  const handleSuccessButtonClick = () => {\n    return new Promise((success) => {\n      setTimeout(() => {\n        success('Everything went right!');\n      }, 1400);\n    });\n  };\n\n  // const handleSubmit = async (newData) => {\n  //   return new Promise((success, failed) => {\n  //     const updateProfile = async () => {\n  //       try {\n  //         const response = await instance({\n  //           method: 'POST',\n  //           url: '/addquestion',\n  //           data: JSON.stringify({ question: [{ ...newData }] }),\n  //           // headers: {\n  //           //   Authorization: `Bearer ${access_token}`,\n  //           // },\n  //         });\n\n  //         const { data } = response;\n  //         console.log(data);\n  //         if (data.success) {\n  //           setFormValues({ ...formValues, ...newData });\n  //           success('Hackathon updated successfully!');\n  //         } else {\n  //           failed('Failed to update hackathon!');\n  //         }\n  //       } catch (error) {\n  //         console.log(error);\n  //         failed('Failed to update hackathon!');\n  //       }\n  //     };\n  //     updateProfile();\n  //   });\n  // };\n\n  const handleChange = (event, key, value = false) => {\n    setFormValues({\n      ...formValues,\n      [key]: value ? event : event.target.value,\n    });\n  };\n\n  return (\n    <>\n      <ModalHeader>\n        <h2 className=\"lead\">\n          <IntlMessages id=\"challenges.modal.join-team-title\" />\n        </h2>\n      </ModalHeader>\n\n      <ModalBody>\n        <FormGroup>\n          <Label>\n            <IntlMessages id=\"challenges.modal.code\" />\n          </Label>\n          <FormGroup>\n            <Input\n              type=\"text\"\n              value={formValues.question}\n              onChange={(event) => handleChange(event, 'code')}\n            />\n          </FormGroup>\n        </FormGroup>\n      </ModalBody>\n\n      <ModalFooter>\n        <StateButton\n          id=\"add-question-buttom\"\n          color=\"secondary\"\n          onClick={() => handleSuccessButtonClick(formValues)}\n        >\n          <IntlMessages id=\"challenges.modal.application-add\" />\n        </StateButton>\n        <Button color=\"danger\" onClick={() => setOpenModal(false)}>\n          <IntlMessages id=\"challenges.modal.application-cancel\" />\n        </Button>\n      </ModalFooter>\n    </>\n  );\n};\n\nexport default JoinTeamModal;\n","/* eslint-disable camelcase */\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, Card, CardBody, CardTitle, Modal } from 'reactstrap';\r\nimport JoinTeamModal from '../../../../components/application/JoinTeamModal';\r\n\r\nimport { Separator } from '../../../../components/common/CustomBootstrap';\r\nimport StateButton from '../../../../components/StateButton';\r\nimport instance from '../../../../helpers/axiosInstance';\r\nimport { adminRoot } from '../../../../constants/defaultValues';\r\nimport IntlMessages from '../../../../helpers/IntlMessages';\r\n// import { NotificationManager } from '../../../../components/common/react-notifications';\r\nimport { getProfileData, wait } from '../../../../helpers/Utils';\r\n// import { wait } from '../../../../helpers/Utils';\r\n\r\nconst CompleteStatus = ({ completePercentage, id }) => {\r\n  const history = useHistory();\r\n  const [openJoinTeam, setOpenJoinTeam] = useState(false);\r\n\r\n  const { user_id } = getProfileData();\r\n\r\n  const handleSubmit = async () => {\r\n    return new Promise((success, failed) => {\r\n      if (completePercentage < 100) {\r\n        failed('Please Complete the Form!');\r\n      }\r\n\r\n      const addJudge = async () => {\r\n        console.log(\"hackathon Submitted\");\r\n\r\n        try {\r\n          const response = await instance({\r\n            method: 'POST',\r\n            url: '/addparticipant',\r\n            data: {\r\n              hackathon_id: id,\r\n              status: '0',\r\n              user_id,\r\n            }\r\n          });\r\n          const { data } = response;\r\n          if (data.success) {\r\n            success('Application submitted successfully!');\r\n\r\n            wait(1200, () => {\r\n              history.push(`${adminRoot}/challenges/${id}`);\r\n            });\r\n          } else {\r\n            success('Application submitted successfully!');\r\n\r\n            wait(1200, () => {\r\n              history.push(`${adminRoot}/challenges/${id}`);\r\n            });\r\n          }\r\n        } catch (error) {\r\n          failed('Failed to Submit Application!');\r\n        }\r\n      };\r\n      addJudge();\r\n    });\r\n  // }\r\n};\r\n//  const { data } = response;\r\n//         if (data.success) {\r\n//           success('Application submitted successfully!');\r\n\r\n//           history.push(`${adminRoot}/challenges/${id}`);\r\n//         } else {\r\n//           failed('Failed to Submit Application!');\r\n//         }\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//         failed('Failed to update hackathon!');\r\n//       }\r\n//     };\r\n\r\n//     addJudge();\r\n//   });\r\n// };\r\n\r\nreturn (\r\n  <>\r\n    <Card>\r\n      <CardBody className=\"text-center\">\r\n        <CardTitle>\r\n          <h2 className=\"lead\">\r\n            <IntlMessages id=\"challenges.application-not-submitted\" />\r\n          </h2>\r\n          <Separator className=\"mb-5\" />\r\n        </CardTitle>\r\n        <p>\r\n          <IntlMessages id=\"challenges.application-filled\" />\r\n        </p>\r\n        <h3 className=\"lead\">{completePercentage}%</h3>\r\n        <p>\r\n          <IntlMessages id=\"challenges.fill-complete-message\" />\r\n        </p>\r\n\r\n        <StateButton\r\n          id=\"submit-application\"\r\n          color=\"primary\"\r\n          onClick={handleSubmit}\r\n          className={completePercentage >= 100 ? '' : 'disabled'}\r\n          successNext={() => {\r\n            window.location.href = '/';\r\n          }}\r\n        >\r\n          <IntlMessages id=\"challenges.submit-individual-button\" />\r\n        </StateButton>\r\n\r\n        <Separator className=\"mt-4 mb-4\" />\r\n\r\n        <Button outline onClick={() => setOpenJoinTeam(true)}>\r\n          <IntlMessages id=\"challenges.join-team-button\" />\r\n        </Button>\r\n\r\n        <Modal\r\n          isOpen={openJoinTeam}\r\n          toggle={() => setOpenJoinTeam(!openJoinTeam)}\r\n        >\r\n          <JoinTeamModal setOpenModal={setOpenJoinTeam} />\r\n        </Modal>\r\n      </CardBody>\r\n    </Card>\r\n  </>\r\n);\r\n};\r\n\r\nexport default CompleteStatus;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { CustomInput, Row, Label, Input } from 'reactstrap';\r\nimport Markdown from 'markdown-to-jsx';\r\nimport {\r\n  Colxx,\r\n  Separator,\r\n} from '../../../../components/common/CustomBootstrap';\r\nimport StateButton from '../../../../components/StateButton';\r\n\r\n// eslint-disable-next-line\r\n\r\nimport IntlMessages from '../../../../helpers/IntlMessages';\r\nimport instance from '../../../../helpers/axiosInstance';\r\nimport { adminRoot } from '../../../../constants/defaultValues';\r\nimport { getProfileData, wait } from '../../../../helpers/Utils';\r\n// import AnswerCard from '../../../../components/cards/AnswerCard';\r\n\r\nconst StepFour = ({ setCompletePercentage, hackData }) => {\r\n  const history = useHistory();\r\n  const [conditionsAccepted, setAccepted] = useState(false);\r\n  const [responseData, setResponseData] = useState([]);\r\n  const profileData = getProfileData();\r\n  let count = 0;\r\n  const [values, setValues] = useState({\r\n    answer1: '',\r\n    answer2: '',\r\n    answer3: '',\r\n    answer4: '',\r\n    answer5: '',\r\n    answer6: '',\r\n    answer7: '',\r\n    answer8: '',\r\n    answer9: '',\r\n    answer10: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (conditionsAccepted) {\r\n      // eslint-disable-next-line\r\n      setCompletePercentage(100);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [conditionsAccepted]);\r\n\r\n  const handleChange = (event, key) => {\r\n    setValues({\r\n      ...values,\r\n      [key]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSuccessButtonClick = async () => {\r\n    hackData.custom_questions.forEach((item, index) => {\r\n      let ans;\r\n      if (index === 0) {\r\n        ans = values.answer1;\r\n      }\r\n      if (index === 1) {\r\n        ans = values.answer2;\r\n      }\r\n      if (index === 2) {\r\n        ans = values.answer3;\r\n      }\r\n      if (index === 3) {\r\n        ans = values.answer4;\r\n      }\r\n      if (index === 4) {\r\n        ans = values.answer5;\r\n      }\r\n      if (index === 5) {\r\n        ans = values.answer6;\r\n      }\r\n      if (index === 6) {\r\n        ans = values.answer7;\r\n      }\r\n      if (index === 7) {\r\n        ans = values.answer8;\r\n      }\r\n      if (index === 8) {\r\n        ans = values.answer9;\r\n      }\r\n      if (index === 0) {\r\n        ans = values.answer1;\r\n      }\r\n      if (index === 1) {\r\n        ans = values.answer2;\r\n      }\r\n      if (index === 2) {\r\n        ans = values.answer3;\r\n      }\r\n      if (index === 3) {\r\n        ans = values.answer4;\r\n      }\r\n      if (index === 4) {\r\n        ans = values.answer5;\r\n      }\r\n      if (index === 9) {\r\n        ans = values.answer10;\r\n      }\r\n      const temp = {\r\n        question_id: item.id,\r\n        question: item.customized_questions,\r\n        answer: ans,\r\n      };\r\n      console.log(ans);\r\n      const spar = responseData;\r\n      spar.push(temp);\r\n      setResponseData(spar);\r\n    });\r\n\r\n    if (conditionsAccepted) {\r\n      const response = await instance({\r\n        method: 'POST',\r\n        url: '/addparticipant',\r\n        data: {\r\n          user_id: profileData.user_id,\r\n          hackathon_id: hackData.hackathon.id,\r\n          status: '0',\r\n          responses: responseData,\r\n        },\r\n      });\r\n\r\n      const { data } = response;\r\n\r\n      if (data.success) {\r\n        wait(1200, () => {\r\n          history.push(`${adminRoot}/challenges/${hackData.hackathon.id}`);\r\n        });\r\n        return new Promise((resolve) => {\r\n          resolve('Hackathon applied successfully!');\r\n        });\r\n      }\r\n      return new Promise((_, reject) => {\r\n        reject(data.message);\r\n      });\r\n    }\r\n    return new Promise((_, reject) => {\r\n      reject('Please accept terms and conditions!');\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"wizard-basic-step m-4 pt-4\">\r\n      <h6 className=\"lead\">\r\n          <IntlMessages id=\"challenges.terms-and-conditions-title\" />\r\n        </h6>\r\n      <div className=\"mb-3\" style={{height: \"15rem\",overflowY:\"auto\"}}>\r\n        \r\n        <Markdown>\r\n          {hackData.hackathon.tnc || \"NAN\"}\r\n\r\n        </Markdown>\r\n      </div>\r\n\r\n      <CustomInput\r\n        type=\"checkbox\"\r\n        label={<IntlMessages id=\"challenges.terms-and-conditions\" />}\r\n        checked={conditionsAccepted}\r\n        onClick={() => setAccepted(!conditionsAccepted)}\r\n      />\r\n\r\n      {hackData.custom_questions.map((item) => {\r\n        if (item.customized_questions !== undefined && count === 0) {\r\n          count = 1;\r\n          return (\r\n            <Row>\r\n              <Colxx xxs=\"12\">\r\n                <Separator className=\"mb-5\" />\r\n                <h1>Answer Important Questions</h1>\r\n                <Separator className=\"mb-5\" />\r\n              </Colxx>\r\n            </Row>\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n\r\n      {hackData.custom_questions.map((item, index) => (\r\n        <>\r\n          <Label key={item.id}>\r\n            <IntlMessages id={item.customized_questions} />\r\n          </Label>\r\n\r\n          <Input\r\n            id={item.id}\r\n            type=\"text\"\r\n            label={<IntlMessages id=\"enter your answer\" />}\r\n            placeholder=\"enter your answer here\"\r\n            onChange={(event) => handleChange(event, `answer${index + 1}`)}\r\n          />\r\n          <br />\r\n        </>\r\n      ))}\r\n\r\n      <Colxx xxs=\"12\" className=\"text-center my-4\">\r\n        <StateButton\r\n          id=\"step-one-button\"\r\n          color=\"primary\"\r\n          onClick={handleSuccessButtonClick}\r\n        >\r\n          <IntlMessages id=\"forms.submit\" />\r\n        </StateButton>\r\n      </Colxx>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StepFour;\r\n","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Row,\n // Button,\n  Card,\n  CardBody,\n  CustomInput,\n  CardTitle,\n  FormGroup,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Label,\n} from 'reactstrap';\nimport Select from 'react-select';\nimport DatePicker from 'react-datepicker';\n// import { useHistory } from 'react-router-dom';\nimport {\n  Colxx,\n  Separator,\n} from '../../../../components/common/CustomBootstrap';\nimport StateButton from '../../../../components/StateButton';\nimport { NotificationManager } from '../../../../components/common/react-notifications';\nimport CustomSelectInput from '../../../../components/common/CustomSelectInput';\nimport {\n // adminRoot,\n  genderOptions,\n  shirtSizeOptions,\n} from '../../../../constants/defaultValues';\nimport instance from '../../../../helpers/axiosInstance';\nimport { setProfileData,getProfileData } from '../../../../helpers/Utils';\n// import StepTwo from './step-two';\n// import { hackthonApplication } from '../../../../constants/defaultValues';\nimport IntlMessages from '../../../../helpers/IntlMessages';\n// import Section from './components/section';\n\nconst addLeadingZero = (input) => {\n  return input < 10 ? `0${input}` : input;\n};\n\nconst StepOne = ({ hackData, currentUser, setChange, setCompletePercentage }) => {\n// const history = useHistory();\n  const { hackathon } = hackData;\n  const { email } = currentUser;\n  const profileData = getProfileData();\n  console.log(email);\n  const { id } = profileData;\n  const id2 = profileData.user_id;\n//  const [editAbout, setEditAbout] = useState(false);\n  const [noFormalEducation, setNoFormalEducation] = useState(false);\n  const [currentlyStudyHere, setCurrentlyStudyHere] = useState(false);\n  const [noExperience, setNoExperience] = useState(false);\n\n  const [formValues, setFormValues] = useState({\n    full_name : profileData.full_name,\n    gender : profileData.gender,\n    tshirt_size : profileData.tshirt_size,\n    contact_no : profileData.contact_no,\n    bio : profileData.bio,\n\n    degree_type : profileData.degree_type,\n    education_institution : profileData.education_institution,\n    field_of_study : profileData.field_of_study,\n    month_of_graduation: profileData.month_of_graduation || new Date().getMonth(),\n    year_of_graduation: profileData.year_of_graduation || new Date().getFullYear(),\n\n    employer: profileData.employer,\n    role: profileData.role,\n    joining_data: profileData.joining_data,\n    leaving_data: profileData.leaving_data,\n    job_description: profileData.job_description,\n\n    facebook: profileData.facebook,\n    github: profileData.github,\n    linkedin: profileData.linkedin,\n    instagram: profileData.instagram,\n\n    city: profileData.city,\n  });\n\n  const [startDate, setStartDate] = useState(\n    new Date(formValues.year_of_graduation, formValues.month_of_graduation)\n  ); \n\n  const handleChange = (event, key) => {\n    setFormValues({\n      ...formValues,\n      [key]: event.target.value,\n    });\n  };\n\n  const handleSubmitAbout = async (newData) => {\n\n    if (\n      newData.full_name === null ||\n      newData.gender === null ||\n      newData.tshirt_size === null ||\n      newData.contact_no === null ||\n      newData.bio === null ||\n      newData.linkedin === null ||\n      newData.city === null\n      ) \n    {\n      NotificationManager.error(\n        'Please enter all the information!',\n        'Hackathon Operation Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n    else{\n      const response = await instance({\n        method: 'POST',\n        url: '/updateProfile',\n        data: { user_id:id2,id, ...newData },\n      });\n  \n      const { data } = response;\n  \n      if (data.success) {\n        setProfileData({ ...profileData, ...newData });\n        setCompletePercentage(75);\n        setChange(2);\n        \n        return new Promise((resolve) => {\n          resolve('Profile updated successfully!');\n        }); \n        \n      }\n    }\n\n    return new Promise((_, reject) => {\n      // eslint-disable-next-line\n      reject('Failed to update profile!');\n    });\n  };\n\n  // const applicationData = JSON.parse(hackathon.application) || {\n  //   about: [],\n  //   contact: [],\n  //   education: [],\n  //   experience: [],\n  //   online_profiles: [],\n  // };\n\n  // const applicationAboutData = hackthonApplication.about.filter(({ value }) =>\n  //   applicationData.about.includes(value)\n  // );\n  // const applicationContactData = hackthonApplication.contact.filter(\n  //   ({ value }) => applicationData.contact.includes(value)\n  // );\n  // const applicationEducationData = hackthonApplication.education.filter(\n  //   ({ value }) => applicationData.education.includes(value)\n  // );\n  // const applicationExpericeData = hackthonApplication.experience.filter(\n  //   ({ value }) => applicationData.experience.includes(value)\n  // );\n  // const applicationOnlineProfileData = hackthonApplication.online_profiles.filter(\n  //   ({ value }) => applicationData.online_profiles.includes(value)\n  // );\n\n  // const handleSuccessButtonClick = () => {\n  //   return new Promise((success) => {\n  //     setTimeout(() => {\n  //       success('Everything went right!');\n  //     }, 1400);\n  //   });\n  // };\n\n  return (\n    <div className=\"wizard-basic-step m-4 pt-4\">\n      <Card className=\"mb-4\" color=\"secondary\">\n        <CardBody>\n          <CardTitle className=\"d-flex justify-content-between\">\n            <IntlMessages id=\"challenges.step-1\" />\n          </CardTitle>\n        </CardBody>\n      </Card>\n      <h2 className=\"lead\">{hackathon.name}</h2>\n      <p>\n        <IntlMessages id=\"challenges.sub-title\" />\n      </p>\n      <Separator className=\"mb-2\" />\n\n      {/* {applicationAboutData.length ? (\n        <Section data={applicationAboutData} userData={userData} />\n      ) : null}\n\n      {applicationExpericeData.length ? (\n        <Section data={applicationExpericeData} userData={userData} />\n      ) : null}\n\n      {applicationEducationData.length ? (\n        <Section data={applicationEducationData} userData={userData} />\n      ) : null}\n\n      {applicationOnlineProfileData.length ? (\n        <Section data={applicationOnlineProfileData} userData={userData} />\n      ) : null}\n\n      {applicationContactData.length ? (\n        <Section data={applicationContactData} userData={userData} />\n      ) : null} */}\n\n<Row className=\"justify-content-center\">\n        <Colxx xxs=\"12\" md=\"12\">\n          <Card className=\"mb-4\">\n            {/* <div className=\"position-absolute card-top-buttons\">\n              <Button\n                outline\n                color=\"primary\"\n                onClick={() => {\n                  setEditAbout(!editAbout);\n                }}\n                className=\"icon-button\"\n              >\n                <i className=\"simple-icon-pencil\" />\n              </Button>\n            </div> */}\n            <CardBody>\n              <CardTitle>\n                <h2 className=\"lead\">\n                  <IntlMessages id=\"Update your all details\" />\n                </h2>\n              </CardTitle>\n\n              <Separator className=\"mb-3\" />\n\n              <FormGroup className=\"mb-3\">\n                <Label>\n                  <IntlMessages id=\"forms.full-name\" />\n                </Label>\n                <Input\n                  type=\"text\"\n                  name=\"full-name\"\n                  value={formValues.full_name}\n                  onChange={(event) => {\n                    handleChange(event, 'full_name');\n                  }}\n                  \n                />\n              </FormGroup>\n\n              <FormGroup className=\"mb-3\">\n                <Label>\n                  <IntlMessages id=\"forms.email\" />\n                </Label>\n                <Input type=\"text\" name=\"email\" value={email} disabled />\n              </FormGroup>\n\n              <FormGroup className=\"mb-3\">\n                <Label>\n                  <IntlMessages id=\"forms.phone\" />\n                </Label>\n                <Input\n                  type=\"text\"\n                  name=\"phone\"\n                  value={formValues.contact_no}\n                  onChange={(event) => {\n                    handleChange(event, 'contact_no');\n                  }}\n                  \n                />\n              </FormGroup>\n\n              <FormGroup className=\"mb-3\">\n                <Label>\n                  <IntlMessages id=\"forms.gender\" />\n                </Label>\n                \n                  <Select\n                    components={{ Input: CustomSelectInput }}\n                    className=\"react-select\"\n                    classNamePrefix=\"react-select\"\n                    name=\"select-gender\"\n                    defaultInputValue={formValues.gender}\n                    onChange={(selectedOption) => {\n                      setFormValues({\n                        ...formValues,\n                        gender: selectedOption.value,\n                      });\n                    }}\n                    options={genderOptions}\n                  />\n                {/* ) : (\n                  <Input\n                    type=\"text\"\n                    name=\"gender\"\n                    value={formValues.gender}\n                    \n                  />\n                )} */}\n              </FormGroup>\n\n              <FormGroup className=\"mb-3\">\n                <Label>\n                  <IntlMessages id=\"forms.t-shirt-size\" />\n                </Label>\n                \n                  <Select\n                    components={{ Input: CustomSelectInput }}\n                    className=\"react-select\"\n                    classNamePrefix=\"react-select\"\n                    name=\"select-t-shirt-size\"\n                    defaultInputValue={formValues.tshirt_size}\n                    onChange={(selectedOption) => {\n                      setFormValues({\n                        ...formValues,\n                        tshirt_size: selectedOption.value,\n                      });\n                    }}\n                    options={shirtSizeOptions}\n                  />\n                {/* ) : (\n                  <Input\n                    type=\"text\"\n                    name=\"t-shirt-size\"\n                    value={formValues.tshirt_size}\n                    \n                  />\n                )} */}\n              </FormGroup>\n\n              <FormGroup className=\"mb-3\">\n                <Label>\n                  <IntlMessages id=\"forms.bio\" />\n                </Label>\n                <Input\n                  type=\"textarea\"\n                  name=\"bio\"\n                  rows=\"6\"\n                  placeholder=\"About Yourself\"\n                  value={formValues.bio}\n                  onChange={(event) => {\n                    handleChange(event, 'bio');\n                  }}\n                  \n                />\n              </FormGroup>\n\n              <FormGroup>\n                <CustomInput\n                  type=\"checkbox\"\n                  id=\"formal-education\"\n                  checked={noFormalEducation}\n                  onChange={() => {\n                    setNoFormalEducation(!noFormalEducation);\n                    if (noFormalEducation) {\n                      setFormValues({\n                        ...formValues,\n                        degree_type: '',\n                        education_institution: '',\n                      });\n                    }\n                  }}\n                  \n                  label=\"I don't have Formal Education.\"\n                />\n              </FormGroup>\n\n              <FormGroup className=\"mb-3\">\n                <Label>\n                  <IntlMessages id=\"forms.degree-type\" />\n                </Label>\n                <Input\n                  type=\"text\"\n                  name=\"degree-type\"\n                  placeholder=\"e.g. B. Tech in Computer Science\"\n                  value={formValues.degree_type}\n                  onChange={(event) => {\n                    handleChange(event, 'degree_type');\n                  }}\n                  disabled={noFormalEducation}\n                />\n              </FormGroup>\n\n              <FormGroup className=\"mb-5\">\n                <Label>\n                  <IntlMessages id=\"forms.select-institution\" />\n                </Label>\n                <Input\n                  type=\"text\"\n                  name=\"select-institution\"\n                  placeholder=\"e.g Vellore Institute of Technology\"\n                  value={formValues.education_institution}\n                  onChange={(event) => {\n                    handleChange(event, 'education_institution');\n                  }}\n                  disabled={noFormalEducation}\n                />\n              </FormGroup>\n\n              <Separator className=\"mt-2 mb-2\" />\n\n              <FormGroup>\n                <CustomInput\n                  type=\"checkbox\"\n                  id=\"curently-study-here\"\n                  checked={currentlyStudyHere}\n                  onChange={() => {\n                    setCurrentlyStudyHere(!currentlyStudyHere);\n                    if (currentlyStudyHere) {\n                      setFormValues({\n                        ...formValues,\n                        month_of_graduation: '',\n                        year_of_graduation: '',\n                      });\n                    }\n                  }}\n                  \n                  label=\"I currently study here.\"\n                />\n              </FormGroup>\n\n              <FormGroup className=\"mb-3\">\n                <Label>\n                  <IntlMessages id=\"forms.field-of-study\" />\n                </Label>\n                <Input\n                  type=\"text\"\n                  name=\"field-of-study\"\n                  placeholder=\"e.g. Software Engineering\"\n                  value={formValues.field_of_study}\n                  onChange={(event) => {\n                    handleChange(event, 'field_of_study');\n                  }}\n                  disabled={currentlyStudyHere}\n                />\n              </FormGroup>\n\n              <Row>\n                <Colxx>\n                  <FormGroup className=\"mb-3\">\n                    <Label>\n                      <IntlMessages id=\"forms.month-of-graduation\" />\n                    </Label>\n                    {!currentlyStudyHere ? (\n                      <DatePicker\n                        selected={startDate}\n                        onChange={(date) => {\n                          setStartDate(date);\n                          const event = {\n                            target: {\n                              value: addLeadingZero(date.getMonth() + 1),\n                            },\n                          };\n                          handleChange(event, 'month_of_graduation');\n                        }}\n                        dateFormat=\"MM\"\n                        showMonthYearPicker\n                      />\n                    ) : (\n                      <Input\n                        type=\"text\"\n                        name=\"month\"\n                        placeholder={`e.g. ${new Date().getMonth()}`}\n                        value={formValues.month_of_graduation}\n                        disabled={currentlyStudyHere}\n                      />\n                    )}\n                  </FormGroup>\n                </Colxx>\n\n                <Colxx>\n                  <FormGroup className=\"mb-3\">\n                    <Label>\n                      <IntlMessages id=\"forms.year-of-graduation\" />\n                    </Label>\n\n                    {!currentlyStudyHere ? (\n                      <DatePicker\n                        selected={startDate}\n                        onChange={(date) => {\n                          setStartDate(date);\n                          const event = {\n                            target: {\n                              value: JSON.stringify(date.getFullYear()),\n                            },\n                          };\n                          handleChange(event, 'year_of_graduation');\n                        }}\n                        showYearPicker\n                        dateFormat=\"yyyy\"\n                      />\n                    ) : (\n                      <Input\n                        type=\"text\"\n                        name=\"year\"\n                        placeholder={`e.g. ${new Date().getFullYear()}`}\n                        value={formValues.year_of_graduation}\n                        disabled={currentlyStudyHere}\n                      />\n                    )}\n                  </FormGroup>\n                </Colxx>\n\n              </Row>\n\n              <FormGroup>\n                <CustomInput\n                  type=\"checkbox\"\n                  id=\"formal-education\"\n                  \n                  label=\"I am yet to find opportunity.\"\n                  checked={noExperience}\n                  onChange={() => setNoExperience(!noExperience)}\n                />\n              </FormGroup>\n\n              <Row>\n                <Colxx md=\"6\">\n                  <FormGroup className=\"mb-3\">\n                    <Label>\n                      <IntlMessages id=\"forms.employer\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"employer\"\n                      placeholder=\"employer\"\n                      value={formValues.employer}\n                      onChange={(event) => {\n                        handleChange(event, 'employer');\n                      }}\n                      disabled={noExperience}\n                    />\n                  </FormGroup>\n                </Colxx>\n                <Colxx md=\"6\">\n                  <FormGroup className=\"mb-3\">\n                    <Label>\n                      <IntlMessages id=\"forms.role\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"role\"\n                      placeholder=\"Role\"\n                      value={formValues.role}\n                      onChange={(event) => {\n                        handleChange(event, 'role');\n                      }}\n                      disabled={noExperience}\n                    />\n                  </FormGroup>\n                </Colxx>\n              </Row>\n\n              <Row>\n                <Colxx md=\"6\">\n                  <FormGroup className=\"mb-3\">\n                    <Label>\n                      <IntlMessages id=\"forms.from\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"joining_data\"\n                      placeholder=\"2021\"\n                      value={formValues.joining_data}\n                      onChange={(event) => {\n                        handleChange(event, 'joining_data');\n                      }}\n                      disabled={noExperience}\n                    />\n                  </FormGroup>\n                </Colxx>\n\n                <Colxx md=\"6\">\n                  <FormGroup className=\"mb-3\">\n                    <Label>\n                      <IntlMessages id=\"forms.to\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"leaving_data\"\n                      placeholder=\"04\"\n                      value={formValues.leaving_data}\n                      onChange={(event) => {\n                        handleChange(event, 'leaving_data');\n                      }}\n                      disabled={noExperience}\n                    />\n                  </FormGroup>\n                </Colxx>\n              </Row>\n\n              <FormGroup className=\"mb-3\">\n                <Label>\n                  <IntlMessages id=\"forms.description\" />\n                </Label>\n                <Input\n                  type=\"textarea\"\n                  name=\"job_description\"\n                  placeholder=\"Desribe your work experience\"\n                      value={formValues.job_description}\n                      onChange={(event) => {\n                        handleChange(event, 'job_description');\n                      }}\n                  rows=\"6\"\n                  disabled={noExperience}\n                />\n              </FormGroup>\n              <FormGroup className=\"mb-6\">\n                <InputGroup>\n                  <InputGroupAddon addonType=\"prepend\">\n                    <i className=\"simple-icon-social-linkedin btn\" />\n                  </InputGroupAddon>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"linkedin\"\n                    value={formValues.linkedin}\n                    onChange={(event) => {\n                      handleChange(event, 'linkedin');\n                    }}\n                    \n                  />\n                </InputGroup>\n              </FormGroup>\n\n              <FormGroup className=\"mb-6\">\n                <InputGroup>\n                  <InputGroupAddon addonType=\"prepend\">\n                    <i className=\"simple-icon-social-facebook btn\" />\n                  </InputGroupAddon>\n                  <Input\n                    type=\"text\"\n                    name=\"facebook\"\n                    value={formValues.facebook}\n                    onChange={(event) => {\n                      handleChange(event, 'facebook');\n                    }}\n                    \n                  />\n                </InputGroup>\n              </FormGroup>\n\n              <FormGroup className=\"mb-6\">\n                <InputGroup>\n                  <InputGroupAddon addonType=\"prepend\">\n                    <i className=\"simple-icon-social-github btn\" />\n                  </InputGroupAddon>\n                  <Input\n                    type=\"text\"\n                    name=\"github\"\n                    className=\"form-control\"\n                    value={formValues.github}\n                    onChange={(event) => {\n                      handleChange(event, 'github');\n                    }}\n                    \n                  />\n                </InputGroup>\n              </FormGroup>\n\n              <FormGroup className=\"mb-6\">\n                <InputGroup>\n                  <InputGroupAddon addonType=\"prepend\">\n                    <i className=\"simple-icon-social-instagram btn\" />\n                  </InputGroupAddon>\n                  <Input\n                    type=\"text\"\n                    name=\"github\"\n                    className=\"form-control\"\n                    value={formValues.instagram}\n                    onChange={(event) => {\n                      handleChange(event, 'instagram');\n                    }}\n                    \n                  />\n                </InputGroup>\n              </FormGroup>\n\n              <FormGroup className=\"mb-3\">\n          <Label>\n            <IntlMessages id=\"forms.email\" />\n          </Label>\n          <Input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            disabled\n            title=\"Can't update Email\"\n          />\n        </FormGroup>\n\n        <Separator className=\"mb-4\" />\n\n        <FormGroup className=\"mb-3\">\n          <Label>\n            <IntlMessages id=\"forms.phone\" />\n          </Label>\n          <Input\n            type=\"text\"\n            name=\"contact-number\"\n            value={formValues.contact_no}\n            onChange={(event) => {\n              handleChange(event, 'contact_no');\n            }}\n            \n          />\n        </FormGroup>\n\n        <FormGroup className=\"mb-3\">\n          <Label>\n            <IntlMessages id=\"forms.city\" />\n          </Label>\n          <Input\n            type=\"text\"\n            name=\"city\"\n            placeholder=\"e.g. Delhi\"\n            value={formValues.city}\n            onChange={(event) => {\n              handleChange(event, 'city');\n            }}\n            \n          />\n        </FormGroup>\n\n\n             \n                <FormGroup className=\"text-center\">\n                  <StateButton\n                    id=\"submitAndNextButton\"\n                    color=\"primary\"\n                    onClick={() => handleSubmitAbout(formValues)}\n                    // next={() => {\n                    //   setEditAbout(false);\n                    // }}\n                  >\n                    <IntlMessages id=\"forms.submit\" />\n                  </StateButton>\n                </FormGroup>\n           \n            </CardBody>\n          </Card>\n        </Colxx>\n      </Row>\n      {/* <CustomInput\n        type=\"checkbox\"\n        label={<IntlMessages id=\"challenges.terms-and-conditions\" />}\n      /> */}\n      {/* <Colxx xxs=\"12\" className=\"text-center my-4\">\n        <StateButton\n          id=\"step-one-button\"\n          color=\"primary\"\n          onClick={handleSuccessButtonClick}\n        >\n          <IntlMessages id=\"forms.submit\" />\n        </StateButton>\n      </Colxx> */}\n    </div>\n  );\n};\nconst mapStateToProps = ({ history, authUser }) => {\n  const { currentUser, profileData } = authUser;\n  return { currentUser, profileData, history };\n};\n\nconst mapActionsToProps = {};\n\nexport default connect(mapStateToProps, mapActionsToProps)(StepOne);\n","/* eslint-disable no-param-reassign */\nimport React, {  useState } from 'react';\nimport {  Wizard } from 'react-albus';\nimport { Card, CardBody, Row } from 'reactstrap';\nimport { Colxx } from '../../../../components/common/CustomBootstrap';\n// import BottomNavigation from '../../../../components/wizard/BottomNavigation';\n// import IntlMessages from '../../../../helpers/IntlMessages';\nimport useFetch from '../../../../hooks/use-fetch';\n\nimport CompleteStatus from './complete-status';\n import StepFour from './step-four';\nimport StepOne from './step-one';\n// import StepThree from './step-three';\n// import StepTwo from './step-two';\n\nconst HackWizard = ({ match }) => {\n  const { id } = match.params;\n\n  const [change, setChange] = useState(1);\n  const [completePercentage, setCompletePercentage] = useState(0);\n  // const [custom, setCustom] = useState({\n  //   question_id: '',\n  //   question: '',\n  //   answer: '',\n  // });\n  const [response,setResponse] = useState([]);\n//  console.log(custom);\n  // const onClickNext = (goToNext, steps, step) => {\n  //   step.isDone = true;\n  //   if (steps.length - 1 <= steps.indexOf(step)) {\n  //     return;\n  //   }\n\n  //   if (completePercentage + 25 >= 99) {\n  //     setCompletePercentage(100);\n  //   } else {\n  //     setCompletePercentage(completePercentage + 25);\n  //   }\n\n  //   goToNext();\n  // };\n\n  // const onClickPrev = (goToPrev, steps, step) => {\n  //   if (steps.indexOf(step) <= 0) {\n  //     return;\n  //   }\n\n  //   if (completePercentage - 33 <= 0) {\n  //     setCompletePercentage(0);\n  //   } else {\n  //     setCompletePercentage(completePercentage - 33);\n  //   }\n\n  //   goToPrev();\n  // };\n  const [check, setCheck] = useState(true);\n  const { data, loading } = useFetch(`/getdetails/${id}`, false, 'getdetails');\n\n  if (loading) return <div className=\"loading\" />;\n\n\n  // const imp3 = (separ) =>{\n  //   setResponse(separ);\n  // }\n  // const imp2 = (separ) =>{\n    \n  //   setTimeout(async() => {\n  //     separ.push(custom);\n  //     console.log(response);\n  //   }, 10000);\n\n  //   setTimeout(async() => {\n  //     imp3(separ);\n  //     console.log(response);\n  //   }, 10000);\n  // }\n\n  if(check) {\n    \n    data.custom_questions.forEach(async(item) => {\n      const temp = {'question_id': item.id,\n      'question': item.customized_questions,\n      'answer': ''};\n      const spar = response;\n      spar.push(temp);\n      setResponse(spar);\n  });\n    setCheck(false);\n  }\n\n  return (\n    <>\n      <Row>\n        <Colxx xs=\"12\" md=\"8\" className=\"mb-4\">\n          <Card>\n            <CardBody className=\"wizard wizard-default \">\n              <Wizard>\n                {change===1 && <StepOne hackData={data} setChange={setChange} setCompletePercentage={setCompletePercentage}/>}\n                {change === 2 && <StepFour hackData={data} responseData={response} setResponseData={setResponse} setCompletePercentage={setCompletePercentage}/>}\n                {/* <Steps>\n                  <Step\n                    id=\"step1\"\n                    name={<IntlMessages id=\"challenges.step-1-title\" />}\n                  >\n                    <StepOne hackData={data} setChange/>\n                  </Step>\n\n                  <Step\n                    id=\"step2\"\n                    name={<IntlMessages id=\"challenges.step-2-title\" />}\n                  >\n                    <StepTwo hackData={data} />\n                  </Step>\n\n                  <Step\n                    id=\"step3\"\n                    name={<IntlMessages id=\"challenges.step-3-title\" />}\n                  >\n                    <StepThree hackData={data} />\n                  </Step>\n\n                  <Step\n                    id=\"step4\"\n                    name={<IntlMessages id=\"challenges.step-4-title\" />}\n                  >\n                    <StepFour />\n                  </Step>\n\n                  <Step id=\"step5\" hideTopNav>\n                    <div className=\"wizard-basic-step text-center m-4 pt-4\">\n                      <h2 className=\"mb-2\">\n                        <IntlMessages id=\"challenges.content-thanks\" />\n                      </h2>\n                      <p>\n                        <i className=\"simple-icon-check h2\" />\n                      </p>\n                      <p>\n                        <IntlMessages id=\"challenges.application-submitted\" />\n                      </p>\n                    </div>\n                  </Step>\n                </Steps> */}\n\n                {/* <BottomNavigation\n                  onClickNext={onClickNext}\n                  onClickPrev={onClickPrev}\n                  className=\"justify-content-between m-4\"\n                  prevLabel={<IntlMessages id=\"forms.previous\" />}\n                  nextLabel={<IntlMessages id=\"forms.next\" />}\n                /> */}\n              </Wizard>\n            </CardBody>\n          </Card>\n        </Colxx>\n        <Colxx xs=\"12\" md=\"4\">\n                        <CompleteStatus completePercentage={completePercentage} id={id} />\n                     </Colxx>\n      </Row>\n    </>\n  );\n};\n\nexport default HackWizard;\n"],"sourceRoot":""}