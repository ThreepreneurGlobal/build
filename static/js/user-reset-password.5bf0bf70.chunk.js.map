{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","hooks/use-request.js","views/user/reset-password.js","views/user/reset-password-otp.js","views/user/verify-otp.js","views/user/complete-registration/profile-form.js","views/user/complete-registration/index.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","validateNewPassword","values","newPassword","newPasswordAgain","errors","connect","authUser","resetPasswordCode","resetPasswordAction","resetPassword","history","OTP","useEffect","NotificationManager","warning","initialValues","visible","setVisiblity","InputType","xxs","md","to","id","validate","onSubmit","touched","name","type","onClick","visiblity","password","color","size","mapActionToProps","verifyOTPAction","verifyOTP","ResendButton","load","email","window","localStorage","getItem","location","reload","doRequest","date","Date","now","renderer","hours","minutes","seconds","completed","disabled","zeroPad","MemoizedResendOTPButton","memo","MyTextArea","useField","field","meta","validateName","value","length","validateEmail","test","ProfileForm","addProfileAction","currentUser","Card","CardBody","CardTitle","IntlMessages","phoneNumber","phone_number","profile","userID","contactNo","FormGroup","Label","fullName","rows","Button","addProfileData","message","about","Row"],"mappings":"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","file":"static/js/user-reset-password.5bf0bf70.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import { useState } from 'react';\nimport instance from '../helpers/axiosInstance';\nimport { log } from '../helpers/Utils';\n\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\n  const [responseData, setData] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const doRequest = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await instance({\n        url,\n        method,\n        headers,\n        data,\n      });\n\n      if (response.data.success) {\n        if (nextSuccess) {\n          nextSuccess(response.data);\n        }\n        setLoading(false);\n        setData(response.data.data);\n      } else {\n        if (nextError) {\n          nextError(response.data.error);\n        }\n        setLoading(false);\n        setError(response.data.error);\n      }\n    } catch (err) {\n      log(err);\n      setLoading(false);\n      setError(err);\n    }\n  };\n\n  return [doRequest, loading, error, responseData];\n};\n\nexport default useRequest;\n","import React, { useState, useEffect } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { resetPassword } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nconst validateNewPassword = (values) => {\n  const { newPassword, newPasswordAgain } = values;\n  const errors = {};\n  if (newPasswordAgain && newPassword !== newPasswordAgain) {\n    errors.newPasswordAgain = 'Please check your new password';\n  }\n  return errors;\n};\n\nconst ResetPassword = ({\n  history,\n  loading,\n  error,\n  resetPasswordAction,\n}) => {\n  const [OTP] = useState('');\n  const [newPassword] = useState('');\n  const [newPasswordAgain] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(\n        error,\n        'Forgot Password Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else if (!loading && newPassword === 'success')\n      NotificationManager.success(\n        'Please login with your new password.',\n        'Reset Password Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n  }, [error, loading, newPassword]);\n\n  const onResetPassword = (values) => {\n    if (!loading) {\n        if (values.newPassword !== '' && values.OTP !== '') {\n          resetPasswordAction({\n            OTP : values.OTP,\n            newPassword: values.newPassword,\n            history,\n          });\n        }\n      \n    }\n  };\n\n  const initialValues = { OTP, newPassword, newPasswordAgain };\n\n  const [visible, setVisiblity] = useState(false);\n\n  const InputType = visible ? 'text' : 'password';\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please use your e-mail to reset your password. <br />\n              If you are not a member, please{' '}\n              <NavLink to=\"/register\" className=\"white\">\n                register\n              </NavLink>\n              .\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              <span className=\"logo-single\" />\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.reset-password\" />\n            </CardTitle>\n\n            <Formik\n              validate={validateNewPassword}\n              initialValues={initialValues}\n              onSubmit={onResetPassword}\n            >\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.otp\" />\n                    </Label>\n                    <Field \n                      className=\"form-control\" \n                      name=\"OTP\" \n                    />\n                  </FormGroup>\n\n\n\n                  <FormGroup className=\"form-group d-flex mb-3 has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password\" />\n                    </Label>\n                    <Field\n                      type={InputType}\n                      name=\"newPassword\"\n                      className=\"form-control\"\n                      validate={validateNewPassword}\n                    />\n                    <div className=\"input-group-append\">\n                      <span className=\"input-group-text py-0\">\n                        <Button\n                          id=\"toggle-icon-button\"\n                          onClick={() =>\n                            setVisiblity((visiblity) => !visiblity)\n                          }\n                        >\n                          <i\n                            id=\"toggle-icon\"\n                            className={\n                              visible\n                                ? 'fa-solid fa-eye-slash'\n                                : 'fa-solid fa-eye'\n                            }\n                          />\n                        </Button>\n                      </span>\n                    </div>\n                    {errors.password && touched.password && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.password}\n                      </div>\n                    )}\n                  </FormGroup>\n\n                  <FormGroup className=\"form-group d-flex mb-3 has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password-again\" />\n                    </Label>\n                    <Field\n                      type={InputType}\n                      name=\"newPasswordAgain\"\n                      className=\"form-control\"\n                      validate={validateNewPassword}\n                    />\n                    <div className=\"input-group-append\">\n                      <span className=\"input-group-text py-0\">\n                        <Button\n                          id=\"toggle-icon-button\"\n                          onClick={() =>\n                            setVisiblity((visiblity) => !visiblity)\n                          }\n                        >\n                          <i\n                            id=\"toggle-icon\"\n                            className={\n                              visible\n                                ? 'fa-solid fa-eye-slash'\n                                : 'fa-solid fa-eye'\n                            }\n                          />\n                        </Button>\n                      </span>\n                    </div>\n                    {errors.newPasswordAgain && touched.newPasswordAgain && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.newPasswordAgain}\n                      </div>\n                    )}\n                  </FormGroup>\n\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <NavLink to=\"/user/login\">\n                      <IntlMessages id=\"user.login-title\" />\n                    </NavLink>\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.reset-password-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { newPassword, resetPasswordCode, loading, error } = authUser;\n  return { newPassword, resetPasswordCode, loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  resetPasswordAction: resetPassword,\n})(ResetPassword);","import React, { /* memo, */ useEffect, useState } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { Formik, Form, Field } from 'formik';\n// import Countdown, { zeroPad } from 'react-countdown';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { verifyOTP } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n// import useRequest from '../../hooks/use-request';\nimport resetPassword from './reset-password';\n// const ResendButton = () => {\n//   const [doRequest] = useRequest({\n//     url: '/resendOtp',\n//     method: 'POST',\n//     data: {\n//       email: '',\n//     },\n//     nextSuccess: () => {\n//       NotificationManager.success(\n//         'OTP reset Successful!',\n//         'Verify OTP Success',\n//         3000,\n//         null,\n//         null,\n//         ''\n//       );\n//     },\n//   });\n//   const onClick = () => doRequest();\n//   const renderer = ({ hours, minutes, seconds, completed }) => {\n//     // Render a countdown\n//     return (\n//       <Button\n//         className=\"btn-shadow btn btn-primary btn-lg mx-2\"\n//         onClick={completed ? onClick : () => {}}\n//         disabled={!completed}\n//       >\n//         {completed\n//           ? 'Resend OTP'\n//           : `${zeroPad(hours)}:${zeroPad(minutes)}:${zeroPad(seconds)}`}\n//       </Button>\n//     );\n//   };\n\n//   return <Countdown date={Date.now() + 30000} renderer={renderer} />;\n// };\n\n// // const MemoizedResendOTPButton = memo(ResendButton);\n\nconst VerifyOTP = ({ loading, error }) => {\n  const [OTP] = useState('');\n\n  const onVerifyOTP = (values) => {\n    if (values.OTP !== '') {\n      <resetPassword \n        OTP = {values.OTP}\n      />\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.error(\n        error,\n        'OTP Verification Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }, [error]);\n\n  const initialValues = { OTP };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please enter the OTP sent to your email. <br />\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <span className=\"logo-single\" />\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.verify-otp\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onVerifyOTP}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.otp\" />\n                    </Label>\n                    <Field className=\"form-control\" name=\"OTP\" />\n                    {errors.OTP && touched.OTP && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.OTP}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-end align-items-center\">\n                    \n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.verify-otp-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { OTP, loading, error } = authUser;\n  return { OTP, loading, error };\n};\n\nconst mapActionToProps = {\n  verifyOTPAction: verifyOTP,\n};\nexport default connect(mapStateToProps, mapActionToProps)(VerifyOTP);\n","import React, { memo, useEffect, useState } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { Formik, Form, Field } from 'formik';\nimport Countdown, { zeroPad } from 'react-countdown';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { verifyOTP } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\nimport useRequest from '../../hooks/use-request';\n\nconst ResendButton = () => {\n  const load = {\n    email: window.localStorage.getItem('_email'),\n  };\n  const [doRequest] = useRequest({\n    url: '/auth/resendOtp',\n    method: 'POST',\n    data: load,\n    nextSuccess: () => {\n      NotificationManager.success(\n        'OTP reset Successful!',\n        'Verify OTP Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n      window.location.reload();\n    },\n  });\n  const onClick = () => {\n    doRequest();\n  };\n  const renderer = ({ hours, minutes, seconds, completed }) => {\n    // Render a countdown\n    return (\n      <Button\n        className=\"btn-shadow btn btn-primary btn-lg mx-2\"\n        onClick={completed ? onClick : () => {}}\n        disabled={!completed}\n      >\n        {completed\n          ? 'Resend OTP'\n          : `${zeroPad(hours)}:${zeroPad(minutes)}:${zeroPad(seconds)}`}\n      </Button>\n    );\n  };\n\n  return <Countdown date={Date.now() + 30000} renderer={renderer} />;\n};\n\nconst MemoizedResendOTPButton = memo(ResendButton);\n\nconst VerifyOTP = ({ history, loading, error, verifyOTPAction }) => {\n  const [OTP] = useState('');\n\n  const onVerifyOTP = (values) => {\n    if (values.OTP !== '') {\n      verifyOTPAction({ ...values, history });\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.error(\n        error,\n        'OTP Verification Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }, [error]);\n\n  const initialValues = { OTP };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please enter the OTP sent to your email. <br />\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <span className=\"logo-single\" />\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.verify-otp\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onVerifyOTP}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.otp\" />\n                    </Label>\n                    <Field className=\"form-control\" name=\"OTP\" />\n                    {errors.OTP && touched.OTP && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.OTP}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-end align-items-center\">\n                    <MemoizedResendOTPButton />\n\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.verify-otp-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { OTP, loading, error } = authUser;\n  return { OTP, loading, error };\n};\n\nconst mapActionToProps = {\n  verifyOTPAction: verifyOTP,\n};\nexport default connect(mapStateToProps, mapActionToProps)(VerifyOTP);\n","import React from 'react';\r\nimport { Formik, Form, Field,useField } from 'formik';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Label,\r\n  Button,\r\n  CardTitle,\r\n} from 'reactstrap';\r\nimport IntlMessages from '../../../helpers/IntlMessages';\r\n\r\nconst MyTextArea = ({ ...props}) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n      <>\r\n         \r\n          <textarea className=\"text-area\" {...field} {...props} />\r\n          {meta.touched && meta.error ? (\r\n              <div className=\"error\">{meta.error}</div>\r\n          ) : null}\r\n      </>\r\n  );\r\n};\r\n\r\n\r\nconst validateName = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your name';\r\n  } else if (value.length < 2) {\r\n    error = 'Value must be longer than 2 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validateEmail = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your email address';\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n    error = 'Invalid email address';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst ProfileForm = ({\r\n  addProfileAction,\r\n  history,\r\n  currentUser,\r\n  initialValues,\r\n  loading,\r\n}) => {\r\n  const onAddProfile = (values) => {\r\n    const { id, phone_number: phoneNumber } = currentUser;\r\n    \r\n    const profile = {\r\n      ...values,\r\n      userID: id,\r\n      contactNo: phoneNumber,\r\n    };\r\n  addProfileAction({ profile, history });\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"wizard-basic-step\">\r\n        <CardTitle className=\"mb-4\">\r\n          <h2 className=\"lead\">\r\n            <IntlMessages id=\"user.profile-form\" />\r\n          </h2>\r\n        </CardTitle>\r\n        <Formik initialValues={initialValues} onSubmit={onAddProfile}>\r\n          {({ errors, touched }) => (\r\n            <Form className=\"av-tooltip tooltip-label-right\">\r\n              <FormGroup>\r\n                <Label>\r\n                  <IntlMessages id=\"user.fullname\" />\r\n                </Label>\r\n                <Field\r\n                  className=\"form-control\"\r\n                  name=\"fullName\"\r\n                  validate={validateName}\r\n                />\r\n                {errors.fullName && touched.fullName && (\r\n                  <div className=\"invalid-feedback d-block\">\r\n                    {errors.fullName}\r\n                  </div>\r\n                )}\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label>\r\n                  <IntlMessages id=\"user.email\" />\r\n                </Label>\r\n                <Field\r\n                  className=\"form-control\"\r\n                  name=\"email\"\r\n                  validate={validateEmail}\r\n                />\r\n                {errors.name && touched.name && (\r\n                  <div className=\"invalid-feedback d-block\">{errors.name}</div>\r\n                )}\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label>\r\n                  <IntlMessages id=\"about\" />\r\n                </Label>\r\n              \r\n                <MyTextArea \r\n                  className=\"form-control\"\r\n                  name=\"about\"\r\n                  rows=\"6\"\r\n                />\r\n                      \r\n                {errors.name && touched.name && (\r\n                      <div className=\"invalid-feedback d-block\">{errors.name}</div>\r\n                    )}\r\n              </FormGroup>\r\n\r\n\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <Button\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className={`btn-shadow btn-multiple-state ${\r\n                    loading ? 'show-spinner' : ''\r\n                  }`}\r\n                  size=\"lg\"\r\n                >\r\n                  <span className=\"spinner d-inline-block\">\r\n                    <span className=\"bounce1\" />\r\n                    <span className=\"bounce2\" />\r\n                    <span className=\"bounce3\" />\r\n                  </span>\r\n                  <span className=\"label\">\r\n                    <IntlMessages id=\"forms.submit\" />\r\n                  </span>\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport {  Row } from 'reactstrap';\nimport { Wizard } from 'react-albus';\nimport { connect } from 'react-redux';\n\nimport { addProfileData } from '../../../redux/actions';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport ProfileForm from './profile-form';\nimport { Colxx } from '../../../components/common/CustomBootstrap';\n// import TopNavigation from '../../../components/wizard/TopNavigation';\n\n// import ThankYouForm from './thank-you-form';\n// import BottomNavigation from '../../../components/wizard/BottomNavigation';\n\nconst CompleteRegistration = ({\n  history,\n  loading,\n  error,\n  currentUser,\n  message,\n  addProfileAction,\n}) => {\n  const [fullName] = useState('');\n  const [email] = useState('');\n  const [about] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.error(\n        error,\n        'Registration Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n      if (!loading && message === 'New profile added') {\n        NotificationManager.success(\n          'Click next',\n          'Profile Added Successfully',\n          3000,\n          null,\n          null,\n          ''\n        );\n    }\n  }, [loading, error,message]);\n\n  const initialValues = {\n    fullName,\n    email,\n    about,\n  };\n\n  // const topNavClick = (stepItem, push) => {\n  //   push(stepItem.id);\n  // };\n\n  // const onClickNext = (goToNext, steps, step) => {\n  //   // eslint-disable-next-line no-param-reassign\n  //   step.isDone = true;\n  //   if (steps.length - 1 <= steps.indexOf(step)) {\n  //     return;\n  //   }\n  //   goToNext();\n  // };\n\n  // const onClickPrev = (goToPrev, steps, step) => {\n  //   if (steps.indexOf(step) <= 0) {\n  //     return;\n  //   }\n  //   goToPrev();\n  // };\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"8\" className=\"mx-auto my-auto wizard wizard-default\">\n        <Wizard>\n          {/* <TopNavigation\n            className=\"justify-content-around\"\n            disableNav={false}\n            topNavClick={topNavClick}\n          /> */}\n          {/* <Steps>\n            <Step id=\"profile-form\"> */}\n              <ProfileForm\n                addProfileAction={addProfileAction}\n                history={history}\n                currentUser={currentUser}\n                initialValues={initialValues}\n                message={message}\n                loading={loading}\n              />\n            {/* </Step>\n\n            <Step id=\"thank-you\">\n              <ThankYouForm \n                currentUser={currentUser}\n              />\n            </Step>\n          </Steps>\n\n          <Card className=\"mt-4\">\n            <CardBody>\n              <BottomNavigation\n                className=\"justify-content-between\"\n                onClickPrev={onClickPrev}\n                prevLabel=\"Previous\"\n                onClickNext={onClickNext}\n                nextLabel=\"Next\"\n              />\n            </CardBody>\n          </Card> */}\n        </Wizard>\n      </Colxx>\n    </Row>\n  );\n};\nconst mapStateToProps = ({ authUser }) => {\n  const { loading, error, message, currentUser } = authUser;\n  return { loading, error,message, currentUser };\n};\n\nconst mapActionToProps = {\n  addProfileAction: addProfileData,\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(CompleteRegistration);\n"],"sourceRoot":""}